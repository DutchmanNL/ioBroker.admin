[{"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/index.js":"1","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/App.js":"2","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/Theme.js":"3","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/HostsWorker.js":"4","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/LogsWorker.js":"5","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/InstancesWorker.js":"6","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/Connection.js":"7","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/BaseSettingsDialog.js":"8","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/SystemSettingsDialog.js":"9","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/Drawer.js":"10","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/login/Login.js":"11","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/ConfirmDialog.js":"12","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/tabs/Instances.js":"13","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/tabs/Adapters.js":"14","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/tabs/Files.js":"15","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/tabs/Logs.js":"16","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/tabs/CustomTab.js":"17","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/tabs/Objects.js":"18","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/tabs/Intro.js":"19","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/Connecting.js":"20","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/CommandDialog.js":"21","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/WizardDialog.js":"22","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/Utils.js":"23","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/BaseSettingsMultihost.js":"24","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/BaseSettingsObjects.js":"25","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/BaseSettingsLog.js":"26","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/BaseSettingsPlugins.js":"27","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/BaseSettingsStates.js":"28","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/BaseSettingsSystem.js":"29","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/WizardSettingsTab.js":"30","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/WizardPasswordTab.js":"31","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/WizardLicenseTab.js":"32","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/TabContent.js":"33","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/TabContainer.js":"34","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/EditIntroLinkDialog.js":"35","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/IntroCard.js":"36","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/CameraIntroDialog.js":"37","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/ObjectBrowserEditObject.js":"38","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/ObjectBrowserValue.js":"39","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/ObjectCustomDialog.js":"40","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/ObjectBrowser.js":"41","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/TabHeader.js":"42","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/FileBrowser.js":"43","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/AdapterRow.js":"44","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/AddInstanceDialog.js":"45","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/AdapterDeletionDialog.js":"46","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/AdapterUpdateDialog.js":"47","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/AdapterInfoDialog.js":"48","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/State.js":"49","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/InstanceInfo.js":"50","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/Config.js":"51","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/ObjectChart.js":"52","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/ObjectHistoryData.js":"53","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/ObjectCustomEditor.js":"54","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/DrawerItem.js":"55","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/StatisticsDialog.js":"56","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/SSLDialog.js":"57","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/ACLDialog.js":"58","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/RepositoriesDialog.js":"59","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/MainSettingsDialog.js":"60","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/SertificatsDialog.js":"61"},{"size":1158,"mtime":1614755680767,"results":"62","hashOfConfig":"63"},{"size":37023,"mtime":1614755680746,"results":"64","hashOfConfig":"63"},{"size":5450,"mtime":1614755680746,"results":"65","hashOfConfig":"63"},{"size":2492,"mtime":1614755680755,"results":"66","hashOfConfig":"63"},{"size":8543,"mtime":1614755680756,"results":"67","hashOfConfig":"63"},{"size":3530,"mtime":1614755680756,"results":"68","hashOfConfig":"63"},{"size":63925,"mtime":1614755680755,"results":"69","hashOfConfig":"63"},{"size":11839,"mtime":1614755680760,"results":"70","hashOfConfig":"63"},{"size":12646,"mtime":1614755680762,"results":"71","hashOfConfig":"63"},{"size":14274,"mtime":1614755680755,"results":"72","hashOfConfig":"63"},{"size":4852,"mtime":1614755680767,"results":"73","hashOfConfig":"63"},{"size":1759,"mtime":1614755680761,"results":"74","hashOfConfig":"63"},{"size":32202,"mtime":1614755680768,"results":"75","hashOfConfig":"63"},{"size":30409,"mtime":1614755680767,"results":"76","hashOfConfig":"63"},{"size":1452,"mtime":1614755680768,"results":"77","hashOfConfig":"63"},{"size":21267,"mtime":1614755680768,"results":"78","hashOfConfig":"63"},{"size":3524,"mtime":1614755680767,"results":"79","hashOfConfig":"63"},{"size":6751,"mtime":1614755680769,"results":"80","hashOfConfig":"63"},{"size":21635,"mtime":1614755680768,"results":"81","hashOfConfig":"63"},{"size":2054,"mtime":1614755680754,"results":"82","hashOfConfig":"63"},{"size":10248,"mtime":1614755680760,"results":"83","hashOfConfig":"63"},{"size":7579,"mtime":1614755680762,"results":"84","hashOfConfig":"63"},{"size":6160,"mtime":1614755680746,"results":"85","hashOfConfig":"63"},{"size":4906,"mtime":1614755680754,"results":"86","hashOfConfig":"63"},{"size":17143,"mtime":1614755680754,"results":"87","hashOfConfig":"63"},{"size":39910,"mtime":1614755680753,"results":"88","hashOfConfig":"63"},{"size":3028,"mtime":1614755680754,"results":"89","hashOfConfig":"63"},{"size":15918,"mtime":1614755680754,"results":"90","hashOfConfig":"63"},{"size":8571,"mtime":1614755680754,"results":"91","hashOfConfig":"63"},{"size":40091,"mtime":1614755680759,"results":"92","hashOfConfig":"63"},{"size":5395,"mtime":1614755680759,"results":"93","hashOfConfig":"63"},{"size":6478,"mtime":1614755680759,"results":"94","hashOfConfig":"63"},{"size":805,"mtime":1614755680758,"results":"95","hashOfConfig":"63"},{"size":1228,"mtime":1614755680758,"results":"96","hashOfConfig":"63"},{"size":16708,"mtime":1614755680761,"results":"97","hashOfConfig":"63"},{"size":15552,"mtime":1614755680756,"results":"98","hashOfConfig":"63"},{"size":4362,"mtime":1614755680760,"results":"99","hashOfConfig":"63"},{"size":4010,"mtime":1614755680757,"results":"100","hashOfConfig":"63"},{"size":8864,"mtime":1614755680757,"results":"101","hashOfConfig":"63"},{"size":6732,"mtime":1614755680761,"results":"102","hashOfConfig":"63"},{"size":127635,"mtime":1614755680757,"results":"103","hashOfConfig":"63"},{"size":409,"mtime":1614755680758,"results":"104","hashOfConfig":"63"},{"size":51180,"mtime":1614755680755,"results":"105","hashOfConfig":"63"},{"size":10377,"mtime":1614755680753,"results":"106","hashOfConfig":"63"},{"size":5545,"mtime":1614755680760,"results":"107","hashOfConfig":"63"},{"size":2665,"mtime":1614755680759,"results":"108","hashOfConfig":"63"},{"size":5174,"mtime":1614755680760,"results":"109","hashOfConfig":"63"},{"size":6728,"mtime":1614755680760,"results":"110","hashOfConfig":"63"},{"size":1430,"mtime":1614755680758,"results":"111","hashOfConfig":"63"},{"size":844,"mtime":1614755680756,"results":"112","hashOfConfig":"63"},{"size":2867,"mtime":1614755680761,"results":"113","hashOfConfig":"63"},{"size":30126,"mtime":1614755680757,"results":"114","hashOfConfig":"63"},{"size":48936,"mtime":1614755680758,"results":"115","hashOfConfig":"63"},{"size":31006,"mtime":1614755680757,"results":"116","hashOfConfig":"63"},{"size":2653,"mtime":1614755680755,"results":"117","hashOfConfig":"63"},{"size":5299,"mtime":1614755680762,"results":"118","hashOfConfig":"63"},{"size":4311,"mtime":1614755680762,"results":"119","hashOfConfig":"63"},{"size":9264,"mtime":1614755680759,"results":"120","hashOfConfig":"63"},{"size":5626,"mtime":1614755680761,"results":"121","hashOfConfig":"63"},{"size":13775,"mtime":1614755680761,"results":"122","hashOfConfig":"63"},{"size":9952,"mtime":1614755680762,"results":"123","hashOfConfig":"63"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7ffl85",{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252"},"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/index.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/App.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/Theme.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/HostsWorker.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/LogsWorker.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/InstancesWorker.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/Connection.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/BaseSettingsDialog.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/SystemSettingsDialog.js",["253","254","255","256","257"],"import withWidth from '@material-ui/core/withWidth';\nimport {ThemeProvider, withStyles} from '@material-ui/core/styles';\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Button from '@material-ui/core/Button';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nimport ConfirmDialog from '@iobroker/adapter-react/Dialogs/Confirm';\nimport Router from '@iobroker/adapter-react/Components/Router';\n\nimport MainSettingsDialog from \"./MainSettingsDialog\";\nimport RepositoriesDialog from \"./RepositoriesDialog\";\nimport SertificatsDialog from \"./SertificatsDialog\";\nimport SSLDialog from \"./SSLDialog\";\nimport ACLDialog from \"./ACLDialog\";\nimport StatisticsDialog from \"./StatisticsDialog\";\n\n// icons\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\n\n//fills\nimport lightBlue from '@material-ui/core/colors/lightBlue'\n\n//style\nimport \"../assets/css/style.css\";\n\n\nconst styles = theme => ({\n    tabPanel: {\n        width: '100%',\n        height: 'calc(100% - ' + theme.mixins.toolbar.minHeight + 'px)',\n        overflow: 'hidden'\n    },\n    tab: {\n        // backgroundColor:\"#FFF\",\n        // color:lightBlue[500]\n    }\n});\n\nclass SystemSettingsDialog extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            confirmExit: false,\n            systemSettings: null,\n            systemRepositories: null,\n        };\n        this.getSettings(this.state.currentHost);\n    }\n\n    getSettings() {\n        const newState = {loading: false};\n        return this.props.socket.getSystemConfig(true)\n            .then(systemSettings => {\n                //console.log(systemSettings);\n                newState.systemSettings = systemSettings && systemSettings.common ? systemSettings.common : {};\n                return this.props.socket.getObject('system.repositories');\n            })\n            .then(systemRepositories => {\n                systemRepositories = JSON.parse(JSON.stringify(systemRepositories));\n                systemRepositories = systemRepositories || {};\n                systemRepositories.native = systemRepositories.native || {};\n                systemRepositories.native.repositories = systemRepositories.native.repositories || {};\n\n                Object.keys(systemRepositories.native.repositories).forEach(repo => {\n                    if (systemRepositories.native.repositories[repo] &&\n                        systemRepositories.native.repositories[repo].json) {\n                        delete systemRepositories.native.repositories[repo].json;\n                    }\n                    if (systemRepositories.native.repositories[repo] &&\n                        systemRepositories.native.repositories[repo].hash) {\n                        delete systemRepositories.native.repositories[repo].hash;\n                    }\n                });\n                this.originalRepositories = JSON.stringify(systemRepositories.native.repositories);\n                this.originalSettings = JSON.stringify(newState.systemSettings);\n                //console.log(systemRepositories.native.repositories);\n                newState.systemRepositories = systemRepositories.native.repositories;\n                return this.props.socket.getObject('system.config');\n            })\n            .then(systemcConfig => {\n                //console.log(systemcConfig);\n                newState.systemcConfig = systemcConfig;\n                // return this.props.socket.getObject('system.certificates');\n                return this.props.socket.getRawSocket().emit(\n                    'sendToHost',\n                    this.props.currentHost,\n                    'getDiagData',\n                    systemcConfig.common.diag,\n                    diagData => {\n                        //console.log(diagData)\n                        newState.diagData = diagData;\n                    });\n            })\n            /**/\n            .then(diagData => this.props.socket.getUsers())\n            .then(users => {\n                //console.log(users);\n                newState.users = users;\n                return this.props.socket.getGroups();\n            })\n            .then(groups => {\n                //console.log(groups);\n                newState.groups = groups;\n                return this.props.socket.getObject('system.certificates');\n            })\n            .then(systemcCertificates => {\n                console.log(systemcCertificates);\n                this.originalCertificates = JSON.stringify(systemcCertificates);\n                newState.systemcCertificates = systemcCertificates;\n                this.setState(newState);\n            });\n    }\n\n    renderConfirmDialog() {\n        if (this.state.confirmExit) {\n            return <ConfirmDialog\n                text={this.props.t('Discard unsaved changes? ')}\n                onClose={result =>\n                    this.setState({confirmExit: false}, () =>\n                        result && this.props.onClose())}\n            />;\n        } else {\n            return null;\n        }\n    }\n\n    onSave() {\n        return this.props.socket.getSystemConfig(true)\n            .then(systemSettings => {\n                systemSettings = systemSettings || {};\n                if (JSON.stringify(systemSettings.common) !== JSON.stringify(this.state.systemSettings)) {\n                    systemSettings.common = this.state.systemSettings;\n                    return this.props.socket.setSystemConfig(systemSettings);\n                } else {\n                    return Promise.resolve();\n                }\n            })\n            .then(() => this.props.socket.getObject('system.repositories'))\n            .then(systemRepositories => {\n                systemRepositories = systemRepositories || {};\n                systemRepositories.native = systemRepositories.native || {};\n                systemRepositories.native.repositories = systemRepositories.native.repositories || {};\n                const newRepo = JSON.parse(JSON.stringify(this.state.systemRepositories));\n\n                // merge new and existing info\n                Object.keys(newRepo).forEach(repo => {\n                    if (systemRepositories.native.repositories[repo] && systemRepositories.native.repositories[repo].json) {\n                        newRepo[repo].json = systemRepositories.native.repositories[repo].json;\n                    }\n                    if (systemRepositories.native.repositories[repo] && systemRepositories.native.repositories[repo].hash) {\n                        newRepo[repo].hash = systemRepositories.native.repositories[repo].hash;\n                    }\n                });\n                systemRepositories.native.repositories = newRepo;\n                return this.props.socket.setObject('system.repositories', systemRepositories);\n            })\n            .catch(e => window.alert('Cannot save system configuration: ' + e));\n    }\n\n    getTabs() {\n        return [\n            {\n                id: 0,\n                title: 'System settings',\n                component: MainSettingsDialog,\n                data: \"systemSettings\"\n            },\n            {\n                id: 1,\n                title: 'Repositories',\n                component: RepositoriesDialog,\n                data: \"systemRepositories\",\n                data2: {}\n            },\n            {\n                id: 2,\n                title: 'Certificates',\n                component: SertificatsDialog,\n                data: \"systemcCertificates\",\n                data2: {}\n            },\n            {\n                id: 3,\n                title: \"Let's encrypt SSL\",\n                component: SSLDialog,\n                data: \"systemcCertificates\",\n                data2: {}\n            },\n            {\n                id: 4,\n                title: \"Default ACL\",\n                component: ACLDialog,\n                data: \"systemcConfig\",\n                data2: {}\n            },\n            {\n                id: 5,\n                title: \"Statistics\",\n                component: StatisticsDialog,\n                data: \"systemcConfig\",\n                data2: \"diagData\"\n            }\n        ];\n    }\n\n    getDialogContent() {\n        if (this.state.loading)\n            return <LinearProgress/>;\n        const _t = this.getTabs().filter((e, i) => {\n            return e.id == (this.props.currentTab.id).toString() || e.id == parseInt(this.props.currentTab.id)\n        }) [0] || this.getTabs()[0];\n        const _Component = _t.component;\n        const {groups, users} = this.state;\n        return <div className={this.props.classes.tabPanel}>\n            <_Component\n                onChange={(id, data) => this.onChangedTab(id, data, _t.data)}\n                {...this.state[_t.data]}\n                data2={this.state[_t.data2]}\n                users={users}\n                themeName={this.props.themeName}\n                groups={groups}\n                t={this.props.t}\n            />\n        </div>\n    }\n\n    onTab = (event, newTab) => {\n        Router.doNavigate(null, 'system', newTab)\n    }\n\n    onChangedTab(id, data, param) {\n        let state = {...this.state};\n        state[param][id] = data;\n        this.setState(state);\n        // console.log( id, data, param, state );\n    }\n\n    render() {\n        //console.log(this.props)\n        const changed = JSON.stringify(this.state.systemSettings) !== this.originalSettings ||\n            JSON.stringify(this.state.systemRepositories) !== this.originalRepositories ||\n            JSON.stringify(this.state.systemcCertificates) !== this.originalCertificates;\n\n        const tabs = this.getTabs().map((e, i) => {\n            return <Tab\n                label={this.props.t(e.title)}\n                id={(e.id).toString()}\n                aria-controls={'simple-tabpanel-' + e.id}\n                key={i}\n            />;\n        })\n        return <ThemeProvider theme={ this.props.theme }>\n            <Dialog\n                className={this.props.classes.dialog}\n                open={true}\n                onClose={() => {}}\n                fullWidth={true}\n                maxWidth=\"xl\"\n                //fullScreen={true}\n                aria-labelledby=\"system-settings-dialog-title\"\n            >\n                <DialogTitle id=\"system-settings-dialog-title\">\n                    {this.props.t('Base settings')}\n                </DialogTitle>\n                <DialogContent className={this.props.classes.content}>\n                    <AppBar position=\"static\" color=\"default\">\n                        <Tabs\n                            className={this.props.classes.tab}\n                            variant=\"fullWidth\"\n                            indicatorColor=\"primary\"\n                            textColor=\"primary\"\n                            value={parseInt(this.props.currentTab.id, 10) || 0}\n                            onChange={this.onTab}\n                        >\n                            {tabs}\n                        </Tabs>\n                    </AppBar>\n                    {this.getDialogContent()}\n                    {this.renderConfirmDialog()}\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        variant=\"contained\"\n                        disabled={!changed}\n                        onClick={() => this.onSave()}\n                        color=\"primary\"\n                    >\n                        <CheckIcon/>\n                        {this.props.t('Save')}\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() => changed ? this.setState({confirmExit: true}) : this.props.onClose()}\n                    >\n                        <CloseIcon/>\n                        {changed ? this.props.t('Cancel') : this.props.t('Close')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </ThemeProvider>;\n    }\n}\n\nSystemSettingsDialog.propTypes = {\n    t: PropTypes.func,\n    lang: PropTypes.string,\n    socket: PropTypes.object,\n    themeName: PropTypes.string,\n    onClose: PropTypes.func.isRequired,\n    currentTab: PropTypes.object,\n};\n\nexport default withWidth()(withStyles(styles)(SystemSettingsDialog));","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/Drawer.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/login/Login.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/ConfirmDialog.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/tabs/Instances.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/tabs/Adapters.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/tabs/Files.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/tabs/Logs.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/tabs/CustomTab.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/tabs/Objects.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/tabs/Intro.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/Connecting.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/CommandDialog.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/WizardDialog.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/Utils.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/BaseSettingsMultihost.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/BaseSettingsObjects.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/BaseSettingsLog.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/BaseSettingsPlugins.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/BaseSettingsStates.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/BaseSettingsSystem.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/WizardSettingsTab.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/WizardPasswordTab.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/WizardLicenseTab.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/TabContent.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/TabContainer.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/EditIntroLinkDialog.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/IntroCard.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/CameraIntroDialog.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/ObjectBrowserEditObject.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/ObjectBrowserValue.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/ObjectCustomDialog.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/ObjectBrowser.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/TabHeader.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/FileBrowser.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/AdapterRow.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/AddInstanceDialog.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/AdapterDeletionDialog.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/AdapterUpdateDialog.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/AdapterInfoDialog.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/State.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/InstanceInfo.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/Config.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/ObjectChart.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/ObjectHistoryData.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/ObjectCustomEditor.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/components/DrawerItem.js",[],"/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/StatisticsDialog.js",["258","259"],"//StatisticsDialog.js\n\n\nimport { Component } from 'react';\nimport AceEditor from 'react-ace';\nimport 'ace-builds/src-noconflict/mode-json';\nimport 'ace-builds/src-noconflict/theme-clouds_midnight';\nimport 'ace-builds/src-noconflict/theme-chrome';\nimport 'ace-builds/src-noconflict/ext-language_tools'\n\nimport withWidth from '@material-ui/core/withWidth';\nimport {withStyles} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nimport blueGrey from '@material-ui/core/colors/blueGrey'\nimport { Paper, Card, Typography, MenuItem, FormControl, Select, InputLabel  } from '@material-ui/core'; \n\n\n// icons\n\nconst styles = theme => ({\n    tabPanel: {\n        width:      '100%',\n        height:     '100% ',\n        overflow:   'auto',\n        padding:    15,\n        //backgroundColor: blueGrey[ 50 ]\n    },\n    note:\n    {\n        padding:15,\n        backgroundColor: blueGrey[ 500 ],\n        color:\"#FFF\"\n    },\n    statis:\n    {\n        padding:15\n    } ,\n    formControl: \n    {\n        margin: theme.spacing(1),\n        minWidth: \"100%\",\n     },\n    selectEmpty: \n    {\n        marginTop: theme.spacing(2),\n    },\n});\n\nclass StatisticsDialog extends Component \n{\n    constructor(props)\n    {\n        super(props); \n        this.state={\n            ...props \n        }\n\n    }\n    render()\n    {\n        //console.log(this.state)\n        const {common} = this.props;\n        const {classes} = this.props;\n        return <div className={ classes.tabPanel }>\n            <Grid container spacing={3}  className=\"sendData-grid\">\n                <Grid item xs={4}>\n                    <Card  className={classes.note} >\n                        <Typography gutterBottom variant=\"h6\" component=\"div\">\n                            {this.props.t(\"Note:\")} \n                        </Typography> \n                        <Typography \n                            paragraph \n                            variant=\"body2\"\n                            component=\"div\"\n                            dangerouslySetInnerHTML={{__html: this.props.t(\"diag-note\")}}\n                        />     \n                     </Card >\n                    { this.getTypesSelector() }\n                </Grid>\n                <Grid item xs={8} className=\"sendData-grid\">\n                    <Paper className={classes.statis} >\n                        <Typography gutterBottom variant=\"h6\" component=\"div\">\n                            {this.props.t(\"Sent data:\")}\n                        </Typography>                       \n                    </Paper>\n                    <AceEditor\n                        mode=\"json\"\n                        width=\"100%\"\n                        height=\"100%\"\n                        showPrintMargin={true}\n                        showGutter={true}\n                        highlightActiveLine={true}\n                        theme={ this.props.themeName === 'dark' || this.props.themeName === 'blue' ? 'clouds_midnight' : 'chrome' }\n                        value={ JSON.stringify(this.state.data2, null, 2) }\n                        onChange={ newValue => this.onChange(newValue) }\n                        name=\"UNIQUE_ID_OF_DIV\"\n                        fontSize={14}\n                        setOptions={{ \n                            enableBasicAutocompletion: true,\n                            enableLiveAutocompletion: true,\n                            enableSnippets: true,\n                            showLineNumbers: true,\n                            tabSize: 2,\n                        }}\n                        editorProps={{ $blockScrolling: true }}\n                    />  \n                </Grid>\n            </Grid>\n        </div>\n\n    }\n    getTypes()\n    {\n        return [\n            {\n                id: \"none\",\n                title: \"none\"\n            },\n            {\n                id: \"standart\",\n                title: \"standart\"\n            },\n            {\n                id: \"without_city\",\n                title: \"without city\"\n            },\n            {\n                id: \"extended\",\n                title: \"extended\"\n            }\n        ]\n    }\n    getTypesSelector = () =>\n    {\n        const {classes} = this.props;\n        const {common} = this.state;\n        const items = this.getTypes().map((elem, index) =>\n        {\n            return <MenuItem value={elem.title} key={index}>\n                { this.props.t(elem.title) }\n            </MenuItem> \n        })\n        return <FormControl className={classes.formControl}>\n            <InputLabel shrink id={\"statistics-label\"}>\n                { this.props.t(\"Statistics\")}\n            </InputLabel>\n            <Select\n                className={classes.formControl}\n                id={\"statistics\"}\n                value={ this.state.common.diag }\n                onChange={ this.handleChangeStatistics }\n                displayEmpty \n                inputProps={{ 'aria-label': 'Without label' }}\n            > \n                {items}\n            </Select> \n        </FormControl> \n    }\n    handleChangeStatistics = evt =>\n    {\n        console.log( evt.target.value );\n        this.setState({\n            common: {...this.state.common, diag:evt.target.value }\n        })\n        \n    }\n}\n\n\nexport default withWidth()\n(\n    withStyles(styles)(\n        StatisticsDialog\n    )\n);\n\n","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/SSLDialog.js",["260","261"],"//SSLDialog.js\nimport {Component} from 'react';\n\nimport withWidth from '@material-ui/core/withWidth';\nimport {withStyles} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Fab from '@material-ui/core/Fab';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\n\nimport AddIcon from '@material-ui/icons/Add';\n\nimport blueGrey from '@material-ui/core/colors/blueGrey'\n\n\n// icons\n\nconst styles = theme => ({\n    tabPanel: {\n        width: '100%',\n        height: '100% ',\n        overflow: 'auto',\n        padding: 15,\n        //backgroundColor: blueGrey[ 50 ]\n    },\n    buttonPanel: {\n        paddingBottom: 40,\n        display: 'flex'\n    },\n    descrPanel: {\n        width: \"100%\",\n        backgroundColor: \"transparent\",\n        marginLeft: 40,\n        border: \"none\",\n        display: 'flex',\n        alignItems: \"center\"\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: \"100%\",\n    },\n});\n\nclass SSLDialog extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...props\n        }\n\n    }\n\n    render() {\n        console.log(this.props.native.letsEncrypt);\n        const {classes, native} = this.state;\n        const {letsEncrypt} = native || {};\n        return <div className={classes.tabPanel}>\n            <div className={classes.buttonPanel}>\n                <Fab\n                    size=\"small\"\n                    color=\"primary\"\n                    aria-label=\"add\"\n                    onClick={this.onAdd}\n                >\n                    <AddIcon/>\n                </Fab>\n                <Paper\n                    variant=\"outlined\"\n                    className={classes.descrPanel}\n                    dangerouslySetInnerHTML={{__html: this.props.t(\"letsnecrypt_help\")}}\n                />\n            </div>\n            <Grid container spacing={6}>\n                <Grid item xs={3}>\n                    <FormControl className={classes.formControl}>\n                        <TextField\n                            id=\"email\"\n                            label={this.props.t(\"Email for account:\")}\n                            value={letsEncrypt.email}\n                            InputLabelProps={{\n                                readOnly: false,\n                                shrink: true,\n                            }}\n                            onChange={evt => this.onChangeText(evt, \"email\")}\n                        />\n                    </FormControl>\n                </Grid>\n                <Grid item xs={3}>\n                    <FormControl className={classes.formControl}>\n                        <TextField\n                            id=\"domains\"\n                            label={this.props.t(\"Domains:\")}\n                            value={letsEncrypt.domains}\n                            InputLabelProps={{\n                                readOnly: false,\n                                shrink: true,\n                            }}\n                            onChange={evt => this.onChangeText(evt, \"domains\")}\n                        />\n                    </FormControl>\n                </Grid>\n                <Grid item xs={3}>\n                    <FormControl className={classes.formControl}>\n                        <TextField\n                            id=\"path\"\n                            label={this.props.t(\"Path to storage:\")}\n                            value={letsEncrypt.path}\n                            InputLabelProps={{\n                                readOnly: false,\n                                shrink: true,\n                            }}\n                            onChange={evt => this.onChangeText(evt, \"path\")}\n                        />\n                    </FormControl>\n                </Grid>\n            </Grid>\n        </div>\n    }\n\n    onChangeText = (evt, id) => {\n        const value = evt.target.value;\n        this.props.onChange(id, value);\n        console.log(id, value);\n        let state = {...this.state};\n        state[id] = value;\n        this.setState(state);\n    }\n}\n\n\nexport default withWidth()\n(\n    withStyles(styles)(\n        SSLDialog\n    )\n);\n\n\n\n","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/ACLDialog.js",["262","263","264","265"],"//ACLDialog.js\n\nimport { Component } from 'react';\n\nimport withWidth from '@material-ui/core/withWidth';\nimport {withStyles} from '@material-ui/core/styles'; \nimport { Grid,  Typography, TextField, FormControl, Checkbox  } from '@material-ui/core';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nimport blueGrey from '@material-ui/core/colors/blueGrey'\n\n\n// icons\n\nconst styles = theme => ({\n    tabPanel: {\n        width:      '100%',\n        height:     '100% ',\n        overflow:   'auto',\n        padding:    15,\n        //backgroundColor: blueGrey[ 50 ]\n    },\n    buttonPanel :\n    {\n        paddingBottom: 40,\n        display:'flex'\n    },\n    descrPanel:\n    {\n        width:\"100%\",\n        backgroundColor:\"transparent\",\n        marginLeft:40,\n        border:\"none\",\n        display:'flex',\n        alignItems:\"center\"\n    },\n    formControl: \n    {\n        margin: theme.spacing(1),\n        minWidth: \"100%\",\n    },\n    tableCell:\n    {\n        textAlign:\"center\",\n        border: \"1px solid #AAA\"\n    }\n});\n\nclass ACLDialog extends Component \n{\n    constructor(props)\n    {\n        super(props);\n        this.state={ \n            ...props\n        }\n\n    }\n    render()\n    {\n        const {classes} = this.props;\n        const users = this.props.users.map((elem, index)=>\n        {\n             return <MenuItem value={elem.ts} key={index}>\n                 { this.props.t(elem.common.name) }\n             </MenuItem>   \n        } );\n        const groups = this.props.groups.map((elem, index)=>\n        {\n             return <MenuItem value={elem._id} key={index}>\n                { this.props.t(elem.common.name['ru']) }\n             </MenuItem>   \n        } );\n        return <div className={ classes.tabPanel }>\n            <Typography variant=\"h5\" component=\"div\">\n                {this.props.t(\"Access control list\")}\n            </Typography>\n            <Grid container spacing={3}>\n                <Grid item xs={3}>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel shrink id={\"owner\" + \"-label\"}>\n                            { this.props.t(\"Owner user\")}\n                        </InputLabel>\n                        <Select\n                            className={classes.formControl}\n                            id={\"owner\"}\n                            value={ this.state.owner }\n                            onChange={ evt => this.handleChange(evt, \"owner\") }\n                            displayEmpty \n                            inputProps={{ 'aria-label': 'users' }}\n                        > \n                            {users}\n                        </Select> \n                    </FormControl> \n                </Grid>\n                <Grid item xs={3}>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel shrink id={\"ownergroup\" + \"-label\"}>\n                            { this.props.t(\"Owner group\")}\n                        </InputLabel>\n                        <Select\n                            className={classes.formControl}\n                            id={\"ownergroup\"}\n                            value={ this.state.ownergroup }\n                            onChange={ evt => this.handleChange(evt, \"ownergroup\")  }\n                            displayEmpty \n                            inputProps={{ 'aria-label': 'ownergroup' }}\n                        > \n                            {groups}\n                        </Select> \n                    </FormControl> \n                </Grid>\n            </Grid> \n            <Grid container spacing={3}>\n                <Grid item xs={4}>\n                    <Typography variant=\"h6\" component=\"div\">\n                        {this.props.t(\"Object rights\")}\n                    </Typography>\n                    { this.getTable() }\n                </Grid>\n                <Grid item xs={4}>\n                    <Typography variant=\"h6\" component=\"div\">\n                        {this.props.t(\"States rights\")}\n                    </Typography>\n                    { this.getTable() }\n                </Grid>\n                <Grid item xs={4}>\n                    <Typography variant=\"h6\" component=\"div\">\n                        {this.props.t(\"File rights\")}\n                    </Typography>\n                    { this.getTable() }\n                </Grid>\n            </Grid> \n        </div>\n\n    }\n    getTable()\n    {\n        const {classes} = this.props;\n        return <TableContainer>\n            <Table className={classes.table} aria-label=\"customized table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell colSpan={2} className={classes.tableCell}>\n                            {this.props.t(\"Owner\")}\n                        </TableCell>\n                        <TableCell colSpan={2} className={classes.tableCell}>\n                            {this.props.t(\"Group\")}\n                        </TableCell>\n                        <TableCell colSpan={2} className={classes.tableCell}>\n                            {this.props.t(\"Everyone\")}\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    <TableRow>\n                        <TableCell className={classes.tableCell}>\n                            {this.props.t(\"read\")}\n                        </TableCell>\n                        <TableCell className={classes.tableCell}>\n                            {this.props.t(\"write\")}\n                        </TableCell>\n                        <TableCell className={classes.tableCell}>\n                            {this.props.t(\"read\")}\n                        </TableCell>\n                        <TableCell className={classes.tableCell}>\n                            {this.props.t(\"write\")}\n                        </TableCell>\n                        <TableCell className={classes.tableCell}>\n                            {this.props.t(\"read\")}\n                        </TableCell>\n                        <TableCell className={classes.tableCell}>\n                            {this.props.t(\"write\")}\n                        </TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell className={classes.tableCell}>\n                            <Checkbox\n                                defaultChecked\n                                color=\"primary\"\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\n                            />\n                        </TableCell>\n                        <TableCell className={classes.tableCell}>\n                            <Checkbox\n                                defaultChecked\n                                color=\"primary\"\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\n                            />\n                        </TableCell>\n                        <TableCell className={classes.tableCell}>\n                            <Checkbox\n                                defaultChecked\n                                color=\"primary\"\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\n                            />\n                        </TableCell>\n                        <TableCell className={classes.tableCell}>\n                            <Checkbox\n                                defaultChecked\n                                color=\"primary\"\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\n                            />\n                        </TableCell>\n                        <TableCell className={classes.tableCell}>\n                            <Checkbox\n                                defaultChecked\n                                color=\"primary\"\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\n                            />\n                        </TableCell>\n                        <TableCell className={classes.tableCell}>\n                            <Checkbox\n                                defaultChecked\n                                color=\"primary\"\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\n                            />\n                        </TableCell>\n                    </TableRow>\n                                         \n                </TableBody>\n            </Table>\n        </TableContainer>\n    }\n    handleChange = (evt, id) =>\n    {\n        const value = evt.target.value; \n        console.log( evt, id, value );\n        this.props.onChange( id, value);\n        let state = {...this.state};\n        state[id] = value;\n        this.setState(state);        \n    }\n}\n\n\nexport default withWidth()\n(\n    withStyles(styles)(\n        ACLDialog\n    )\n);\n\n","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/RepositoriesDialog.js",["266"],"// RepositoriesDialog\nimport { Component } from 'react';\n\nimport withWidth from '@material-ui/core/withWidth';\nimport {withStyles} from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab'; \n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\n\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport blueGrey from '@material-ui/core/colors/blueGrey' \n\n\n// icons\n\nconst styles = theme => ({\n    tabPanel: {\n        width:      '100%',\n        height:     '100% ',\n        overflow:   'auto',\n        padding:    15,\n        //backgroundColor: blueGrey[ 50 ]\n    },\n    table: \n    {\n        minWidth: 650,\n    },\n    buttonPanel :\n    {\n        paddingBottom: 40,\n        display:'flex'\n    },\n    descrPanel:\n    {\n        width:\"100%\",\n        backgroundColor:\"transparent\",\n        marginLeft:40,\n        border:\"none\",\n        display:'flex',\n        alignItems:\"center\"\n    },\n    littleRow : \n    {\n        width: 110\n    },\n    nameRow : \n    {\n        width: 220\n    },\n    input : \n    {\n        width: \"100%\"\n    }\n});\n\nclass RepositoriesDialog extends Component \n{\n    constructor(props)\n    {\n        super(props);\n        const arr = Object.keys(props)\n            .filter((e,i) => props[e] && typeof props[e].link === \"string\" )\n                .map(e => { return  {...props[e], title:e} } )\n        \n        this.state={\n            ...props,\n            arr     : arr\n        }\n\n    }\n    render()\n    {\n        const { classes } = this.props; \n        console.log( this.state );\n        const rows = this.state.arr.map((e, i) =>\n        {\n            return <TableRow key={e.title + e.link} >\n                <TableCell className={this.props.classes.littleRow}>\n                    {i + 1}\n                </TableCell>\n                <TableCell className={this.props.classes.nameRow}>                               \n                    <TextField \n                        defaultValue={e.title}\n                        InputLabelProps={{\n                            readOnly: false,\n                            shrink: true,\n                        }} \n                        className={this.props.classes.input}\n                    />\n                </TableCell>\n                <TableCell>\n                    <TextField\n                        id=\"default\" \n                        defaultValue={ e.link }\n                        InputLabelProps={{\n                            readOnly: false,\n                            shrink: true,\n                        }}\n                        className={this.props.classes.input}\n                        onChange={evt => this.onChangeText(evt, e.title) }\n                    />\n                </TableCell>\n                <TableCell className={this.props.classes.littleRow}>\n                    <Fab\n                        size=\"small\"  \n                        color=\"secondary\" \n                        aria-label=\"add\" \n                        onClick={evt => this.onDelete( i )}\n                    >\n                       <DeleteIcon />\n                    </Fab>\n                </TableCell>\n            </TableRow>\n        })\n        return <div className={ classes.tabPanel }>\n            <div className={ classes.buttonPanel }>\n                <Fab \n                    size=\"small\"  \n                    color=\"primary\" \n                    aria-label=\"add\"\n                    onClick={this.onAdd}\n                >\n                    <AddIcon />\n                </Fab>\n                <Paper variant=\"outlined\" className={ classes.descrPanel }>\n                    { this.props.t( \"cert_path_note\" ) }\n                </Paper>\n            </div>\n            <TableContainer>\n                <Table className={classes.table} aria-label=\"customized table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell className={this.props.classes.littleRow}> </TableCell>\n                            <TableCell className={this.props.classes.nameRow}>\n                                {this.props.t(\"name\")}\n                            </TableCell>\n                            <TableCell>{this.props.t(\"link\")}</TableCell>\n                            <TableCell className={this.props.classes.littleRow}> </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        { rows }                        \n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n\n    }\n    onChangeText = (evt, id) =>\n    {\n        const value = evt.target.value; \n        this.props.onChange( id, value);\n        console.log( id, value );\n        let state = {...this.state};\n        state[id] = value;\n        this.setState(state);        \n    }\n    onDelete = i =>\n    {\n        let arr = [...this.state.arr];\n        arr.splice(i, 1);\n        console.log(arr, i )\n        this.setState({arr});\n    }\n    onAdd = () =>\n    {\n        let arr = [...this.state.arr];\n        arr.push({\n            link: \"\",\n            title: \"\"  \n        });\n        this.setState({arr});\n    }\n}\n\n\nexport default withWidth()\n(\n    withStyles(styles)(\n        RepositoriesDialog\n    )\n);\n","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/MainSettingsDialog.js",["267","268","269","270"],"import { Component } from 'react';\n\nimport { MapContainer as LeafletMap, TileLayer, Marker, Popup } from 'react-leaflet';\n\nimport withWidth from '@material-ui/core/withWidth';\nimport {withStyles} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\n\n// colors\nimport blueGrey from '@material-ui/core/colors/blueGrey'\n\n// icons\n\n//data\nimport countries from \"../assets/json/countries\";\n\nconst styles = theme => ({\n    tabPanel: \n    {\n        width:      '100%',\n        height:     '100% ',\n        overflow:   'auto',\n        overflowX   : \"hidden\",\n        padding:    15,\n        //backgroundColor: blueGrey[ 50 ]\n    } ,\n    formControl: \n    {\n        margin: theme.spacing(1),\n        minWidth: \"100%\",\n     },\n    selectEmpty: \n    {\n        marginTop: theme.spacing(2),\n    },\n    descrPanel:\n    {\n        width:\"100%\",\n        // backgroundColor:\"transparent\",\n        padding :16,\n        // border:\"none\",\n        display:'flex',\n        alignItems:\"center\"\n    },\n});\n\nclass MainSettingsDialog extends Component \n{\n    constructor(props)\n    {\n        super(props);\n        this.state={\n            values:[],\n            ...props\n        }\n\n    }\n    componentDidMount()\n    {\n        console.log(\"mount\")\n\n    }\n    getSettings()\n    {\n        return [\n            {\n                id      : \"language\",\n                title   : \"System language:\",       \n                values  : [\n                    {\n                        id:\"en\",\n                        title:\"English\"\n                    },\n                    {\n                        id:\"ge\",\n                        title:\"Deutsch\"\n                    },\n                    {\n                        id:\"ru\",\n                        title:\"русский\"\n                    },\n                    {\n                        id:\"po\",\n                        title:\"Portugues\"\n                    },\n                    {\n                        id:\"nd\",\n                        title:\"Nederlands\"\n                    },\n                    {\n                        id:\"fr\",\n                        title:\"français\"\n                    },\n                    {\n                        id:\"it\",\n                        title:\"Italiano\"\n                    },\n                    {\n                        id:\"sp\",\n                        title:\"Espanol\"\n                    },\n                    {\n                        id:\"pl\",\n                        title:\"Polski\"\n                    },\n                    {\n                        id:\"ch\",\n                        title:\"简体中文\"\n                    }\n                ]      \n            },\n            {\n                id:\"tempUnit\",\n                title:\"Temperature units\",\n                values: [\n                    {\n                        id:\"°C\",\n                        title:\"°C\"\n                    },\n                    {\n                        id:\"°F\",\n                        title:\"°F\"\n                    }\n                ]\n            },\n            {\n                id:\"currency\",\n                title:\"Currency sign\",\n                values: [\n                    {\n                        id:\"€\",\n                        title:\"€\"\n                    },\n                    {\n                        id:\"$\",\n                        title:\"$\"\n                    },\n                    {\n                        id:\"₽\",\n                        title:\"₽\"\n                    },\n                    {\n                        id:\"₤\",\n                        title:\"₤\"\n                    }\n                ]\n            },\n            {\n                id:\"dateFormat\",\n                title:\"Date format\",\n                values: [\n                    {\n                        id:\"DD.MM.YYYY\",\n                        title:\"DD.MM.YYYY\"\n                    },\n                    {\n                        id:\"DD.MM.YY\",\n                        title:\"DD.MM.YY\"\n                    },\n                    {\n                        id:\"DD/MM/YYYY\",\n                        title:\"DD/MM/YYYY\"\n                    }\n                ]\n            },\n            {\n                id:\"isFloatComma\",\n                title:\"Date Float comma sign\",\n                values: [\n                    {\n                        id:true,\n                        title:\"comma\"\n                    },\n                    {\n                        id:false,\n                        title:\"point\"\n                    }\n                ]\n            },\n            {\n                id:\"defaultHistory\",\n                title:\"Default History\",\n                values: [\n                   \n                ]\n            },\n            {\n                id:\"activeRepo\",\n                title:\"Default Repository\",\n                values: [\n                    {\n                        id:\"default\",\n                        title:\"Stable (default)\"\n                    },\n                    {\n                        id:\"latest\",\n                        title:\"Beta (latest)\"\n                    },\n                ]\n            }\n        ]\n    }\n    render()\n    {\n        //console.log(this.state)\n        const {classes} = this.props;        \n        const selectors = this.getSettings().map((e,i) =>\n        {\n            return this.getSelect( e, i )\n        }) \n        const center = [\n            this.state.latitude   ? this.state.latitude : 50,\n            this.state.longitude  ? this.state.longitude : 10\n        ]\n        return <div className={ classes.tabPanel }>\n            <Grid container spacing={6}>\n                <Grid item xs={6}> \n                    <Paper variant=\"outlined\" className={ classes.descrPanel }>\n                        { this.props.t( \"cert_path_note\" ) }\n                    </Paper>\n                    <Grid container spacing={3}>\n                        {selectors}\n                    </Grid>\n                </Grid>\n                <Grid item xs={6}>\n                    <LeafletMap\n                        center={center}\n                        zoom={14}\n                        maxZoom={18}\n                        attributionControl={true}\n                        zoomControl={true}\n                        doubleClickZoom={true}\n                        scrollWheelZoom={true}\n                        dragging={true}\n                        animate={true}\n                        easeLinearity={0.35}\n                        whenCreated={this.onMap} \n                    >\n                        <TileLayer\n                            url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\n                        />\n                        \n                    </LeafletMap>\n                </Grid>\n                \n            </Grid>\n            <Grid container spacing={6}>\n                <Grid item xs={3}>\n                    {this.getCounters()}\n                </Grid>\n                <Grid item xs={3}> \n                    <FormControl className={classes.formControl}>\n                        <InputLabel shrink id={ \"city-label\"}>\n                            { this.props.t(\"City\")}\n                        </InputLabel>\n                        <TextField\n                            id=\"city\"\n                            label=\"City\"\n                            value={ this.state.city }\n                            InputLabelProps={{\n                                readOnly: false,\n                                shrink: true,\n                            }}\n                            onChange={evt => this.onChangeText(evt, \"city\") }\n                        />\n                    </FormControl>\n                </Grid>\n                <Grid item xs={3}> \n                    <FormControl className={classes.formControl}>\n                        <InputLabel shrink id={ \"latitude-label\"}>\n                            { this.props.t(\"Latitude\")}\n                        </InputLabel>\n                        <TextField\n                            id=\"latitude\"\n                            label=\"Latitude\"\n                            value={ this.state.latitude }\n                            InputLabelProps={{\n                                readOnly: false,\n                                shrink: true,\n                            }}\n                            onChange={evt => this.onChangeText(evt, \"latitude\") }\n                        />\n                    </FormControl>\n                </Grid>\n                <Grid item xs={3}> \n                    <FormControl className={classes.formControl}>\n                        <InputLabel shrink id={ \"longitude-label\"}>\n                            { this.props.t(\"Longitude\")}\n                        </InputLabel>\n                        <TextField\n                            id=\"longitude\"\n                            label=\"Longitude\"\n                            value={ this.state.longitude }\n                            InputLabelProps={{\n                                readOnly: false,\n                                shrink: true,\n                            }}\n                            onChange={evt => this.onChangeText(evt, \"longitude\") }\n                        />\n                    </FormControl>\n                </Grid>\n            </Grid>\n        </div>\n\n    }\n    onMap = map =>\n    {\n        //console.log(map);\n        //console.log(window.L);\n        const center = [\n            this.state.latitude   ? this.state.latitude : 50,\n            this.state.longitude  ? this.state.longitude : 10\n        ]\n        var marker = window.L.marker(\n            center, \n            {\n                draggable:true,\n                title:\"Resource location\",\n                alt:\"Resource Location\",\n                riseOnHover:true\n           }\n        )\n            .addTo(map)\n                .bindPopup(\" Popup for any custom information.\")\n                    .on({\n                         dragend: evt => this.onMarkerDragend(evt)\n                    });\n\n        map.on({  click: evt => console.log(evt.latlng.lat)  }); \n        /*\n        var elements = document.getElementsByClassName(\"leaflet-marker-icon\");\n        while(elements.length > 0){\n           // elements[0].parentNode.removeChild(elements[0]);\n        }\n        */\n    }\n    getSelect( e, i )\n    {\n        const {classes} = this.props;\n        const value = this.state[this.getSettings()[i].id];\n        //console.log( this.getSettings()[i].id, value );\n        const items = this.getSettings()[i].values.map((elem, index)=>\n        {\n             return <MenuItem value={elem.id} key={index}>\n                 { this.props.t(elem.title) }\n             </MenuItem>   \n        } )\n        return  <Grid item xs={6} key={i} >\n             <FormControl className={classes.formControl}>\n                <InputLabel shrink id={e.id + \"-label\"}>\n                    { this.props.t(this.getSettings()[i].title)}\n                </InputLabel>\n                <Select\n                    className={classes.formControl}\n                    id={e.id}\n                    value={ value }\n                    onChange={ evt => this.handleChange(evt, i) }\n                    displayEmpty \n                    inputProps={{ 'aria-label': 'Without label' }}\n                > \n                    {items}\n                </Select> \n            </FormControl> \n        </Grid >\n\n    }\n    getCounters = () =>\n    {\n        const {classes} = this.props;\n        const items = countries.map((elem, index) =>\n        {\n            return <MenuItem value={elem.name} key={index}>\n                { this.props.t(elem.name) }\n            </MenuItem> \n        })\n        return <FormControl className={classes.formControl}>\n            <InputLabel shrink id={\"country-label\"}>\n                { this.props.t(\"Country\")}\n            </InputLabel>\n            <Select\n                className={classes.formControl}\n                id={\"country\"}\n                value={ this.state.country }\n                onChange={ this.handleChangeCountry }\n                displayEmpty \n                inputProps={{ 'aria-label': 'Without label' }}\n            > \n                {items}\n            </Select> \n        </FormControl> \n    }\n    handleChangeCountry = evt  =>\n    {\n        const value = evt.target.value; \n        const id = \"country\";\n        this.props.onChange( id, value);\n        console.log( id, value );\n        let state = {...this.state};\n        state[id] = value;\n        this.setState(state);\n    }\n    onChangeText = (evt, id) =>\n    {\n        const value = evt.target.value; \n        this.props.onChange( id, value);\n        console.log( id, value );\n        let state = {...this.state};\n        state[id] = value;\n        this.setState(state);        \n    }\n    handleChange = (evt, selectId) =>\n    {\n        const value = evt.target.value; \n        const id = this.getSettings()[selectId].id;\n        this.props.onChange( id, value);\n        console.log( id, value );\n        let state = {...this.state};\n        state[id] = value;\n        this.setState(state);\n    }\n    onMarkerDragend = evt =>\n    {\n        const ll = evt.target._latlng;\n        //console.log(ll)\n        this.props.onChange( \"latitude\",  ll.lat);\n        this.props.onChange( \"longitude\", ll.lng);\n        this.setState({\n           latitude  : ll.lat,\n           longitude : ll.lng\n        })\n\n    }\n}\n\n\nexport default withWidth()\n(\n    withStyles(styles)(\n        MainSettingsDialog\n    )\n);\n","/Users/zalash/MyProject/ioBrokerProject/ioBroker.admin/src-rx/src/dialogs/SertificatsDialog.js",["271","272","273","274"],"// SertificatsDialog.js\nimport { Component } from 'react';\nimport clsx from 'clsx';\nimport Dropzone from 'react-dropzone'\n\nimport withWidth from '@material-ui/core/withWidth';\nimport {withStyles} from '@material-ui/core/styles';\n\nimport Fab from '@material-ui/core/Fab'; \nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\n\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport blueGrey from '@material-ui/core/colors/blueGrey' \n\n\n// icons\n\n\n\nconst styles = theme => ({\n    tabPanel: {\n        width:      '100%',\n        height:     '100% ',\n        overflow:   'auto',\n        padding:    15,\n        position:   \"relative\",\n        //backgroundColor: blueGrey[ 50 ]\n    },\n    tableContainer:{\n        zIndex:100\n    },\n    table: \n    {\n        minWidth: 650,\n    },\n    buttonPanel :\n    {\n        paddingBottom: 40,\n        display:'flex'\n    },\n    descrPanel:\n    {\n        width:\"100%\",\n        backgroundColor:\"transparent\",\n        marginLeft:40,\n        border:\"none\",\n        display:'flex',\n        alignItems:\"center\"\n    },\n    littleRow : \n    {\n        width: 110\n    },\n    nameRow : \n    {\n        width: 220\n    },\n    input : \n    {\n        width: \"100%\"\n    }\n});\n\nclass SertificatsDialog extends Component \n{\n    constructor(props)\n    {\n        super(props);\n        const arr = Object.keys(props.native.certificates)\n            .map(e => { return  {data : props.native.certificates[e], title : e} } )\n        \n        this.state = {\n            ...props,\n            arr     : arr,\n            chclass : false\n        }\n\n    }\n    render()\n    {\n        //console.log( this.props );\n        const { classes } = this.props; \n        const rows = this.state.arr.map((e, i) =>\n        {\n            return <TableRow key={e.title + e.data} >\n                <TableCell className={this.props.classes.littleRow}>\n                    {i + 1}\n                </TableCell>\n                <TableCell className={this.props.classes.nameRow}>                               \n                    <TextField \n                        defaultValue={e.title}\n                        InputLabelProps={{\n                            readOnly: false,\n                            shrink: true,\n                        }} \n                        className={this.props.classes.input}\n                    />\n                </TableCell>\n                <TableCell>\n                    <TextField\n                        id=\"default\" \n                        defaultValue={ e.data }\n                        InputLabelProps={{\n                            readOnly: false,\n                            shrink: true,\n                        }}\n                        className={this.props.classes.input}\n                        onChange={evt => this.onChangeText(evt, e.title) }\n                    />\n                </TableCell>\n                <TableCell className={this.props.classes.littleRow}>\n                    <Fab\n                        size=\"small\"  \n                        color=\"secondary\" \n                        aria-label=\"add\" \n                        onClick={evt => this.onDelete( i )}\n                    >\n                       <DeleteIcon />\n                    </Fab>\n                </TableCell>\n            </TableRow>\n        })\n        return <div className={ classes.tabPanel }>\n            <Dropzone \n                noClick \n                accept=\"text/plain,application/json\"\n            >\n            {({ getRootProps, getInputProps, acceptedFiles, fileRejections }) => (\n                <div {...getRootProps({ \n                    accept:  \"text/plain\",\n                    className   : clsx( this.state.chclass ? \"drop-container drop-dop\" : 'drop-container'),\n                    onDragEnter : evt => {\n                        //console.log( getRootProps(), evt );\n                        this.setState({chclass : true}) \n                    },\n                    onDragLeave : evt => {\n                        //console.log( \"onDragLeave\", evt, acceptedFiles, fileRejections ) \n                        this.setState({chclass : false}) \n                    },\n                    onDrop      : evt => {\n                        //console.log( \"onDrop\", evt, acceptedFiles, fileRejections );\n                        if( fileRejections.length > 0 ) \n                        {\n                            //console.log( \"onDrop fileRejections\", fileRejections);\n                            let msg = [];\n                            fileRejections.map((e =>\n                                {\n                                    let m = e.file.name + \": \", mm = [];\n                                    e.errors.forEach(ee =>\n                                        {\n                                           mm.push( ee.message );\n                                        })\n                                    msg.push( m + mm.join( \",\" ) );   \n                                }));\n                            alert(msg.join(\", \"))\n                        }\n                        if( acceptedFiles.length > 0 )\n                        {\n                            //console.log( \"onDrop acceptedFiles\", acceptedFiles);\n                            acceptedFiles.map(file =>\n                            {\n                                var reader = new FileReader();\n                                reader.onload = async (e) =>\n                                { \n                                    //console.log( file.name ); \n                                    //console.log( e.target.result ); \n                                    let arr = [...this.state.arr];\n                                    let name = file.name;\n                                    name =  name.split(\".\");   \n                                    name.splice( name.length - 1, 100 ) \n                                    arr.push({\n                                        data: e.target.result,\n                                        title:  name.join(\".\")\n                                    });\n                                    this.setState({arr});\n                                    let dat = {};\n                                    arr.forEach(ar =>\n                                    {\n                                        dat[ar.title] = ar.data;\n                                    })\n                                    this.props.onChange( \n                                        \"native\", \n                                        {\n                                            certificates : dat\n                                        }\n                                    );\n                                };\n                                reader.readAsText(file);\n                            })\n                            \n                        }\n                        else if(fileRejections.length == 0)\n                        {\n                            alert(\"No files exists\")\n                        }\n                        this.setState({chclass : false}) \n                    }\n                })}>\n                    <input {...getInputProps()} /> \n                </div>\n            )}\n            </Dropzone>\n            <div className={ classes.buttonPanel }>\n                <Fab \n                    size=\"small\"  \n                    color=\"primary\" \n                    aria-label=\"add\"\n                    onClick={this.onAdd}\n                >\n                    <AddIcon />\n                </Fab>\n                <Paper variant=\"outlined\" className={ classes.descrPanel }>\n                    {\n                        this.props.t(\n                            \"вы можете использовать абсолютный путь к сертификату, например '/opt/certs/cert.pem', или просто перетащить файл сюда\"\n                        )\n                    }\n                </Paper>\n            </div>\n            <TableContainer className={classes.tableContainer}>\n                <Table className={classes.table} aria-label=\"customized table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell className={this.props.classes.littleRow}> </TableCell>\n                            <TableCell className={this.props.classes.nameRow}>\n                                {this.props.t(\"name\")}\n                            </TableCell>\n                            <TableCell>{this.props.t(\"Sertificate\")}</TableCell>\n                            <TableCell className={this.props.classes.littleRow}> </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        { rows }                        \n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n    }\n    onChangeText = (evt, id) =>\n    {\n        const value = evt.target.value; \n        this.props.onChange( id, value);\n        console.log( id, value );\n        let state = {...this.state};\n        state[id] = value;\n        this.setState(state);        \n    }\n    onDelete = i =>\n    {\n        let arr = [...this.state.arr];\n        arr.splice(i, 1);\n        console.log(arr, i )\n        this.setState({arr});\n    }\n    onAdd = () =>\n    {\n        let arr = [...this.state.arr];\n        arr.push({\n            link: \"\",\n            title: \"\"  \n        });\n        this.setState({arr});\n    }\n}\n\n\nexport default withWidth()\n(\n    withStyles(styles)(\n        SertificatsDialog\n    )\n);\n\n\n\n",{"ruleId":"275","severity":1,"message":"276","line":30,"column":8,"nodeType":"277","messageId":"278","endLine":30,"endColumn":17},{"ruleId":"279","severity":1,"message":"280","line":219,"column":20,"nodeType":"281","messageId":"282","endLine":221,"endColumn":15,"fix":"283"},{"ruleId":"284","severity":1,"message":"285","line":220,"column":25,"nodeType":"286","messageId":"287","endLine":220,"endColumn":27},{"ruleId":"284","severity":1,"message":"285","line":220,"column":74,"nodeType":"286","messageId":"287","endLine":220,"endColumn":76},{"ruleId":"288","severity":1,"message":"289","line":225,"column":13,"nodeType":"290","endLine":233,"endColumn":15},{"ruleId":"275","severity":1,"message":"291","line":63,"column":16,"nodeType":"277","messageId":"278","endLine":63,"endColumn":22},{"ruleId":"275","severity":1,"message":"291","line":137,"column":16,"nodeType":"277","messageId":"278","endLine":137,"endColumn":22},{"ruleId":"275","severity":1,"message":"292","line":8,"column":8,"nodeType":"277","messageId":"278","endLine":8,"endColumn":18},{"ruleId":"275","severity":1,"message":"293","line":15,"column":8,"nodeType":"277","messageId":"278","endLine":15,"endColumn":16},{"ruleId":"275","severity":1,"message":"294","line":7,"column":29,"nodeType":"277","messageId":"278","endLine":7,"endColumn":38},{"ruleId":"275","severity":1,"message":"293","line":18,"column":8,"nodeType":"277","messageId":"278","endLine":18,"endColumn":16},{"ruleId":"295","severity":1,"message":"296","line":89,"column":56,"nodeType":"286","messageId":"297","endLine":89,"endColumn":57},{"ruleId":"295","severity":1,"message":"296","line":106,"column":61,"nodeType":"286","messageId":"297","endLine":106,"endColumn":62},{"ruleId":"275","severity":1,"message":"293","line":20,"column":8,"nodeType":"277","messageId":"278","endLine":20,"endColumn":16},{"ruleId":"275","severity":1,"message":"298","line":3,"column":49,"nodeType":"277","messageId":"278","endLine":3,"endColumn":55},{"ruleId":"275","severity":1,"message":"299","line":3,"column":57,"nodeType":"277","messageId":"278","endLine":3,"endColumn":62},{"ruleId":"275","severity":1,"message":"293","line":16,"column":8,"nodeType":"277","messageId":"278","endLine":16,"endColumn":16},{"ruleId":"275","severity":1,"message":"300","line":320,"column":13,"nodeType":"277","messageId":"278","endLine":320,"endColumn":19},{"ruleId":"275","severity":1,"message":"293","line":22,"column":8,"nodeType":"277","messageId":"278","endLine":22,"endColumn":16},{"ruleId":"301","severity":1,"message":"302","line":155,"column":51,"nodeType":"303","messageId":"304","endLine":155,"endColumn":53},{"ruleId":"301","severity":1,"message":"302","line":169,"column":52,"nodeType":"303","messageId":"304","endLine":169,"endColumn":54},{"ruleId":"284","severity":1,"message":"285","line":201,"column":55,"nodeType":"286","messageId":"287","endLine":201,"endColumn":57},"no-unused-vars","'lightBlue' is defined but never used.","Identifier","unusedVar","no-whitespace-before-property","Unexpected whitespace before property 0.","MemberExpression","unexpectedWhitespace",{"range":"305","text":"306"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-pascal-case","Imported JSX component _Component must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'common' is assigned a value but never used.","'InputLabel' is defined but never used.","'blueGrey' is defined but never used.","'TextField' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'Marker' is defined but never used.","'Popup' is defined but never used.","'marker' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",[8834,8835],""]