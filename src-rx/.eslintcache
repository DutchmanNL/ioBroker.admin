[{"C:\\pWork\\ioBroker.admin\\src-rx\\src\\index.js":"1","C:\\pWork\\ioBroker.admin\\src-rx\\src\\App.js":"2","C:\\pWork\\ioBroker.admin\\src-rx\\src\\Theme.js":"3","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\Connecting.js":"4","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\InstancesWorker.js":"5","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\HostsWorker.js":"6","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\ConfirmDialog.js":"7","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\Drawer.js":"8","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\Connection.js":"9","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\CommandDialog.js":"10","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\LogsWorker.js":"11","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\WizardDialog.js":"12","C:\\pWork\\ioBroker.admin\\src-rx\\src\\login\\Login.js":"13","C:\\pWork\\ioBroker.admin\\src-rx\\src\\tabs\\Instances.js":"14","C:\\pWork\\ioBroker.admin\\src-rx\\src\\tabs\\Files.js":"15","C:\\pWork\\ioBroker.admin\\src-rx\\src\\tabs\\CustomTab.js":"16","C:\\pWork\\ioBroker.admin\\src-rx\\src\\tabs\\Intro.js":"17","C:\\pWork\\ioBroker.admin\\src-rx\\src\\tabs\\Logs.js":"18","C:\\pWork\\ioBroker.admin\\src-rx\\src\\tabs\\Objects.js":"19","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\BaseSettingsDialog.js":"20","C:\\pWork\\ioBroker.admin\\src-rx\\src\\tabs\\Adapters.js":"21","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\SystemSettingsDialog.js":"22","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\ObjectCustomDialog.js":"23","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\ObjectBrowserEditObject.js":"24","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\ObjectBrowserValue.js":"25","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\ObjectBrowser.js":"26","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\TabHeader.js":"27","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\TabContent.js":"28","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\TabContainer.js":"29","C:\\pWork\\ioBroker.admin\\src-rx\\src\\Utils.js":"30","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\ObjectChart.js":"31","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\ObjectHistoryData.js":"32","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\ObjectCustomEditor.js":"33","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\StatisticsDialog.js":"34","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\SSLDialog.js":"35","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\ACLDialog.js":"36","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\AdapterUpdateDialog.js":"37","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\AdapterInfoDialog.js":"38","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\AddInstanceDialog.js":"39","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\AdapterRow.js":"40","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\SertificatsDialog.js":"41","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\MainSettingsDialog.js":"42","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\AdapterDeletionDialog.js":"43","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\RepositoriesDialog.js":"44","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsLog.js":"45","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsPlugins.js":"46","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsObjects.js":"47","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsMultihost.js":"48","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsStates.js":"49","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsSystem.js":"50","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\EditIntroLinkDialog.js":"51","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\IntroCard.js":"52","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\FileBrowser.js":"53","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\InstanceInfo.js":"54","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\State.js":"55","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\Config.js":"56","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\WizardLicenseTab.js":"57","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\WizardSettingsTab.js":"58","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\WizardPasswordTab.js":"59","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\CameraIntroDialog.js":"60","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\DrawerItem.js":"61"},{"size":1197,"mtime":1604855214594,"results":"62","hashOfConfig":"63"},{"size":38033,"mtime":1614595453151,"results":"64","hashOfConfig":"63"},{"size":5648,"mtime":1604855214558,"results":"65","hashOfConfig":"63"},{"size":2139,"mtime":1604855214564,"results":"66","hashOfConfig":"63"},{"size":3642,"mtime":1595675976163,"results":"67","hashOfConfig":"63"},{"size":2573,"mtime":1595675976162,"results":"68","hashOfConfig":"63"},{"size":1813,"mtime":1604855214586,"results":"69","hashOfConfig":"63"},{"size":14661,"mtime":1607806336816,"results":"70","hashOfConfig":"63"},{"size":65810,"mtime":1609074897429,"results":"71","hashOfConfig":"63"},{"size":10590,"mtime":1604855214585,"results":"72","hashOfConfig":"63"},{"size":8828,"mtime":1604855214570,"results":"73","hashOfConfig":"63"},{"size":7781,"mtime":1604855214590,"results":"74","hashOfConfig":"63"},{"size":4992,"mtime":1609078528036,"results":"75","hashOfConfig":"63"},{"size":33093,"mtime":1604855214597,"results":"76","hashOfConfig":"63"},{"size":1509,"mtime":1604855214596,"results":"77","hashOfConfig":"63"},{"size":3633,"mtime":1604855214596,"results":"78","hashOfConfig":"63"},{"size":22234,"mtime":1607806336377,"results":"79","hashOfConfig":"63"},{"size":21900,"mtime":1604855214598,"results":"80","hashOfConfig":"63"},{"size":6924,"mtime":1609074262494,"results":"81","hashOfConfig":"63"},{"size":12128,"mtime":1611170187638,"results":"82","hashOfConfig":"63"},{"size":31307,"mtime":1611170187643,"results":"83","hashOfConfig":"63"},{"size":12968,"mtime":1614596906635,"results":"84","hashOfConfig":"63"},{"size":6905,"mtime":1604855214588,"results":"85","hashOfConfig":"63"},{"size":4123,"mtime":1604855214573,"results":"86","hashOfConfig":"63"},{"size":9045,"mtime":1604855214573,"results":"87","hashOfConfig":"63"},{"size":131032,"mtime":1609075364474,"results":"88","hashOfConfig":"63"},{"size":432,"mtime":1604855214578,"results":"89","hashOfConfig":"63"},{"size":847,"mtime":1604855214577,"results":"90","hashOfConfig":"63"},{"size":1280,"mtime":1604855214577,"results":"91","hashOfConfig":"63"},{"size":6344,"mtime":1595675976130,"results":"92","hashOfConfig":"63"},{"size":30947,"mtime":1604855214574,"results":"93","hashOfConfig":"63"},{"size":50158,"mtime":1604855214575,"results":"94","hashOfConfig":"63"},{"size":31834,"mtime":1609069558958,"results":"95","hashOfConfig":"63"},{"size":5476,"mtime":1614249300080,"results":"96","hashOfConfig":"63"},{"size":4452,"mtime":1614595352317,"results":"97","hashOfConfig":"63"},{"size":9515,"mtime":1614249300076,"results":"98","hashOfConfig":"63"},{"size":5334,"mtime":1604855214582,"results":"99","hashOfConfig":"63"},{"size":6963,"mtime":1604855214582,"results":"100","hashOfConfig":"63"},{"size":5708,"mtime":1604855214583,"results":"101","hashOfConfig":"63"},{"size":10679,"mtime":1607806337633,"results":"102","hashOfConfig":"63"},{"size":10236,"mtime":1614249300079,"results":"103","hashOfConfig":"63"},{"size":14222,"mtime":1614249300077,"results":"104","hashOfConfig":"63"},{"size":2751,"mtime":1604855214581,"results":"105","hashOfConfig":"63"},{"size":5817,"mtime":1614249300078,"results":"106","hashOfConfig":"63"},{"size":40676,"mtime":1607806337510,"results":"107","hashOfConfig":"63"},{"size":3131,"mtime":1607806337105,"results":"108","hashOfConfig":"63"},{"size":17482,"mtime":1607806337219,"results":"109","hashOfConfig":"63"},{"size":5036,"mtime":1607806337346,"results":"110","hashOfConfig":"63"},{"size":16237,"mtime":1607806337008,"results":"111","hashOfConfig":"63"},{"size":8748,"mtime":1607806336910,"results":"112","hashOfConfig":"63"},{"size":17088,"mtime":1604855214587,"results":"113","hashOfConfig":"63"},{"size":16025,"mtime":1604855214569,"results":"114","hashOfConfig":"63"},{"size":52489,"mtime":1609074328146,"results":"115","hashOfConfig":"63"},{"size":883,"mtime":1607806336540,"results":"116","hashOfConfig":"63"},{"size":1490,"mtime":1604855214576,"results":"117","hashOfConfig":"63"},{"size":2955,"mtime":1604855214585,"results":"118","hashOfConfig":"63"},{"size":6643,"mtime":1604855214579,"results":"119","hashOfConfig":"63"},{"size":40676,"mtime":1604855214581,"results":"120","hashOfConfig":"63"},{"size":5528,"mtime":1604855214580,"results":"121","hashOfConfig":"63"},{"size":4495,"mtime":1604855214584,"results":"122","hashOfConfig":"63"},{"size":2748,"mtime":1607806336701,"results":"123","hashOfConfig":"63"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"16gkkgn",{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"126"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"126"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"126"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"126"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"126"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"126"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"C:\\pWork\\ioBroker.admin\\src-rx\\src\\index.js",[],["253","254"],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\App.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\Theme.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\Connecting.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\InstancesWorker.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\HostsWorker.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\ConfirmDialog.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\Drawer.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\Connection.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\CommandDialog.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\LogsWorker.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\WizardDialog.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\login\\Login.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\tabs\\Instances.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\tabs\\Files.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\tabs\\CustomTab.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\tabs\\Intro.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\tabs\\Logs.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\tabs\\Objects.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\BaseSettingsDialog.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\tabs\\Adapters.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\SystemSettingsDialog.js",["255","256","257","258","259"],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\ObjectCustomDialog.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\ObjectBrowserEditObject.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\ObjectBrowserValue.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\ObjectBrowser.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\TabHeader.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\TabContent.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\TabContainer.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\Utils.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\ObjectChart.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\ObjectHistoryData.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\ObjectCustomEditor.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\StatisticsDialog.js",["260","261"],"//StatisticsDialog.js\r\n\r\n\r\nimport { Component } from 'react';\r\nimport AceEditor from 'react-ace';\r\nimport 'ace-builds/src-noconflict/mode-json';\r\nimport 'ace-builds/src-noconflict/theme-clouds_midnight';\r\nimport 'ace-builds/src-noconflict/theme-chrome';\r\nimport 'ace-builds/src-noconflict/ext-language_tools'\r\n\r\nimport withWidth from '@material-ui/core/withWidth';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport blueGrey from '@material-ui/core/colors/blueGrey'\r\nimport { Paper, Card, Typography, MenuItem, FormControl, Select, InputLabel  } from '@material-ui/core'; \r\n\r\n\r\n// icons\r\n\r\nconst styles = theme => ({\r\n    tabPanel: {\r\n        width:      '100%',\r\n        height:     '100% ',\r\n        overflow:   'auto',\r\n        padding:    15,\r\n        //backgroundColor: blueGrey[ 50 ]\r\n    },\r\n    note:\r\n    {\r\n        padding:15,\r\n        backgroundColor: blueGrey[ 500 ],\r\n        color:\"#FFF\"\r\n    },\r\n    statis:\r\n    {\r\n        padding:15\r\n    } ,\r\n    formControl: \r\n    {\r\n        margin: theme.spacing(1),\r\n        minWidth: \"100%\",\r\n     },\r\n    selectEmpty: \r\n    {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n});\r\n\r\nclass StatisticsDialog extends Component \r\n{\r\n    constructor(props)\r\n    {\r\n        super(props); \r\n        this.state={\r\n            ...props \r\n        }\r\n\r\n    }\r\n    render()\r\n    {\r\n        //console.log(this.state)\r\n        const {common} = this.props;\r\n        const {classes} = this.props;\r\n        return <div className={ classes.tabPanel }>\r\n            <Grid container spacing={3}  className=\"sendData-grid\">\r\n                <Grid item xs={4}>\r\n                    <Card  className={classes.note} >\r\n                        <Typography gutterBottom variant=\"h6\" component=\"div\">\r\n                            {this.props.t(\"Note:\")} \r\n                        </Typography> \r\n                        <Typography \r\n                            paragraph \r\n                            variant=\"body2\"\r\n                            component=\"div\"\r\n                            dangerouslySetInnerHTML={{__html: this.props.t(\"diag-note\")}}\r\n                        />     \r\n                     </Card >\r\n                    { this.getTypesSelector() }\r\n                </Grid>\r\n                <Grid item xs={8} className=\"sendData-grid\">\r\n                    <Paper className={classes.statis} >\r\n                        <Typography gutterBottom variant=\"h6\" component=\"div\">\r\n                            {this.props.t(\"Sent data:\")}\r\n                        </Typography>                       \r\n                    </Paper>\r\n                    <AceEditor\r\n                        mode=\"json\"\r\n                        width=\"100%\"\r\n                        height=\"100%\"\r\n                        showPrintMargin={true}\r\n                        showGutter={true}\r\n                        highlightActiveLine={true}\r\n                        theme={ this.props.themeName === 'dark' || this.props.themeName === 'blue' ? 'clouds_midnight' : 'chrome' }\r\n                        value={ JSON.stringify(this.state.data2, null, 2) }\r\n                        onChange={ newValue => this.onChange(newValue) }\r\n                        name=\"UNIQUE_ID_OF_DIV\"\r\n                        fontSize={14}\r\n                        setOptions={{ \r\n                            enableBasicAutocompletion: true,\r\n                            enableLiveAutocompletion: true,\r\n                            enableSnippets: true,\r\n                            showLineNumbers: true,\r\n                            tabSize: 2,\r\n                        }}\r\n                        editorProps={{ $blockScrolling: true }}\r\n                    />  \r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n\r\n    }\r\n    getTypes()\r\n    {\r\n        return [\r\n            {\r\n                id: \"none\",\r\n                title: \"none\"\r\n            },\r\n            {\r\n                id: \"standart\",\r\n                title: \"standart\"\r\n            },\r\n            {\r\n                id: \"without_city\",\r\n                title: \"without city\"\r\n            },\r\n            {\r\n                id: \"extended\",\r\n                title: \"extended\"\r\n            }\r\n        ]\r\n    }\r\n    getTypesSelector = () =>\r\n    {\r\n        const {classes} = this.props;\r\n        const {common} = this.state;\r\n        const items = this.getTypes().map((elem, index) =>\r\n        {\r\n            return <MenuItem value={elem.title} key={index}>\r\n                { this.props.t(elem.title) }\r\n            </MenuItem> \r\n        })\r\n        return <FormControl className={classes.formControl}>\r\n            <InputLabel shrink id={\"statistics-label\"}>\r\n                { this.props.t(\"Statistics\")}\r\n            </InputLabel>\r\n            <Select\r\n                className={classes.formControl}\r\n                id={\"statistics\"}\r\n                value={ this.state.common.diag }\r\n                onChange={ this.handleChangeStatistics }\r\n                displayEmpty \r\n                inputProps={{ 'aria-label': 'Without label' }}\r\n            > \r\n                {items}\r\n            </Select> \r\n        </FormControl> \r\n    }\r\n    handleChangeStatistics = evt =>\r\n    {\r\n        console.log( evt.target.value );\r\n        this.setState({\r\n            common: {...this.state.common, diag:evt.target.value }\r\n        })\r\n        \r\n    }\r\n}\r\n\r\n\r\nexport default withWidth()\r\n(\r\n    withStyles(styles)(\r\n        StatisticsDialog\r\n    )\r\n);\r\n\r\n","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\SSLDialog.js",["262","263"],"//SSLDialog.js\r\nimport { Component } from 'react';\r\n\r\nimport withWidth from '@material-ui/core/withWidth';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Fab from '@material-ui/core/Fab';  \r\nimport InputLabel from '@material-ui/core/InputLabel'; \r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport blueGrey from '@material-ui/core/colors/blueGrey'\r\n\r\n\r\n// icons\r\n\r\nconst styles = theme => ({\r\n    tabPanel: {\r\n        width:      '100%',\r\n        height:     '100% ',\r\n        overflow:   'auto',\r\n        padding:    15,\r\n        //backgroundColor: blueGrey[ 50 ]\r\n    },\r\n    buttonPanel :\r\n    {\r\n        paddingBottom: 40,\r\n        display:'flex'\r\n    },\r\n    descrPanel:\r\n    {\r\n        width:\"100%\",\r\n        backgroundColor:\"transparent\",\r\n        marginLeft:40,\r\n        border:\"none\",\r\n        display:'flex',\r\n        alignItems:\"center\"\r\n    },\r\n    formControl: \r\n    {\r\n        margin: theme.spacing(1),\r\n        minWidth: \"100%\",\r\n    },\r\n});\r\n\r\nclass SSLDialog extends Component \r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={ \r\n            ...props\r\n        }\r\n\r\n    }\r\n    render()\r\n    {\r\n        console.log( this.props.native.letsEncrypt );\r\n        const { classes, native } = this.state; \r\n        const {letsEncrypt} = native || {};\r\n        return <div className={ classes.tabPanel }>\r\n            <div className={ classes.buttonPanel }>\r\n                <Fab \r\n                    size=\"small\"  \r\n                    color=\"primary\" \r\n                    aria-label=\"add\"\r\n                    onClick={this.onAdd}\r\n                >\r\n                    <AddIcon />\r\n                </Fab>\r\n                <Paper \r\n                    variant=\"outlined\" \r\n                    className={ classes.descrPanel }\r\n                    dangerouslySetInnerHTML={{__html: this.props.t(\"letsnecrypt_help\")}}\r\n                />\r\n            </div>\r\n            <Grid container spacing={6}> \r\n                <Grid item xs={3}> \r\n                    <FormControl className={classes.formControl}> \r\n                        <TextField\r\n                            id=\"email\"\r\n                            label={ this.props.t(\"Email for account:\")}\r\n                            value={ letsEncrypt.email }\r\n                            InputLabelProps={{\r\n                                readOnly: false,\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={evt => this.onChangeText(evt, \"email\") }\r\n                        />\r\n                    </FormControl>\r\n                </Grid> \r\n                <Grid item xs={3}> \r\n                    <FormControl className={classes.formControl}> \r\n                        <TextField\r\n                            id=\"domains\"\r\n                            label={ this.props.t(\"Domains:\")}\r\n                            value={ letsEncrypt.domains }\r\n                            InputLabelProps={{\r\n                                readOnly: false,\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={evt => this.onChangeText(evt, \"domains\") }\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={3}> \r\n                    <FormControl className={classes.formControl}> \r\n                        <TextField\r\n                            id=\"path\" \r\n                            label={ this.props.t(\"Path to storage:\")}\r\n                            value={ letsEncrypt.path }\r\n                            InputLabelProps={{\r\n                                readOnly: false,\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={evt => this.onChangeText(evt, \"path\") }\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    }\r\n    onChangeText = (evt, id) =>\r\n    {\r\n        const value = evt.target.value; \r\n        this.props.onChange( id, value);\r\n        console.log( id, value );\r\n        let state = {...this.state};\r\n        state[id] = value;\r\n        this.setState(state);        \r\n    }\r\n}\r\n\r\n\r\nexport default withWidth()\r\n(\r\n    withStyles(styles)(\r\n        SSLDialog\r\n    )\r\n);\r\n\r\n\r\n\r\n","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\ACLDialog.js",["264","265","266","267"],"//ACLDialog.js\r\n\r\nimport { Component } from 'react';\r\n\r\nimport withWidth from '@material-ui/core/withWidth';\r\nimport {withStyles} from '@material-ui/core/styles'; \r\nimport { Grid,  Typography, TextField, FormControl, Checkbox  } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport blueGrey from '@material-ui/core/colors/blueGrey'\r\n\r\n\r\n// icons\r\n\r\nconst styles = theme => ({\r\n    tabPanel: {\r\n        width:      '100%',\r\n        height:     '100% ',\r\n        overflow:   'auto',\r\n        padding:    15,\r\n        //backgroundColor: blueGrey[ 50 ]\r\n    },\r\n    buttonPanel :\r\n    {\r\n        paddingBottom: 40,\r\n        display:'flex'\r\n    },\r\n    descrPanel:\r\n    {\r\n        width:\"100%\",\r\n        backgroundColor:\"transparent\",\r\n        marginLeft:40,\r\n        border:\"none\",\r\n        display:'flex',\r\n        alignItems:\"center\"\r\n    },\r\n    formControl: \r\n    {\r\n        margin: theme.spacing(1),\r\n        minWidth: \"100%\",\r\n    },\r\n    tableCell:\r\n    {\r\n        textAlign:\"center\",\r\n        border: \"1px solid #AAA\"\r\n    }\r\n});\r\n\r\nclass ACLDialog extends Component \r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={ \r\n            ...props\r\n        }\r\n\r\n    }\r\n    render()\r\n    {\r\n        const {classes} = this.props;\r\n        const users = this.props.users.map((elem, index)=>\r\n        {\r\n             return <MenuItem value={elem.ts} key={index}>\r\n                 { this.props.t(elem.common.name) }\r\n             </MenuItem>   \r\n        } );\r\n        const groups = this.props.groups.map((elem, index)=>\r\n        {\r\n             return <MenuItem value={elem._id} key={index}>\r\n                { this.props.t(elem.common.name['ru']) }\r\n             </MenuItem>   \r\n        } );\r\n        return <div className={ classes.tabPanel }>\r\n            <Typography variant=\"h5\" component=\"div\">\r\n                {this.props.t(\"Access control list\")}\r\n            </Typography>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={3}>\r\n                    <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink id={\"owner\" + \"-label\"}>\r\n                            { this.props.t(\"Owner user\")}\r\n                        </InputLabel>\r\n                        <Select\r\n                            className={classes.formControl}\r\n                            id={\"owner\"}\r\n                            value={ this.state.owner }\r\n                            onChange={ evt => this.handleChange(evt, \"owner\") }\r\n                            displayEmpty \r\n                            inputProps={{ 'aria-label': 'users' }}\r\n                        > \r\n                            {users}\r\n                        </Select> \r\n                    </FormControl> \r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink id={\"ownergroup\" + \"-label\"}>\r\n                            { this.props.t(\"Owner group\")}\r\n                        </InputLabel>\r\n                        <Select\r\n                            className={classes.formControl}\r\n                            id={\"ownergroup\"}\r\n                            value={ this.state.ownergroup }\r\n                            onChange={ evt => this.handleChange(evt, \"ownergroup\")  }\r\n                            displayEmpty \r\n                            inputProps={{ 'aria-label': 'ownergroup' }}\r\n                        > \r\n                            {groups}\r\n                        </Select> \r\n                    </FormControl> \r\n                </Grid>\r\n            </Grid> \r\n            <Grid container spacing={3}>\r\n                <Grid item xs={4}>\r\n                    <Typography variant=\"h6\" component=\"div\">\r\n                        {this.props.t(\"Object rights\")}\r\n                    </Typography>\r\n                    { this.getTable() }\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <Typography variant=\"h6\" component=\"div\">\r\n                        {this.props.t(\"States rights\")}\r\n                    </Typography>\r\n                    { this.getTable() }\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <Typography variant=\"h6\" component=\"div\">\r\n                        {this.props.t(\"File rights\")}\r\n                    </Typography>\r\n                    { this.getTable() }\r\n                </Grid>\r\n            </Grid> \r\n        </div>\r\n\r\n    }\r\n    getTable()\r\n    {\r\n        const {classes} = this.props;\r\n        return <TableContainer>\r\n            <Table className={classes.table} aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell colSpan={2} className={classes.tableCell}>\r\n                            {this.props.t(\"Owner\")}\r\n                        </TableCell>\r\n                        <TableCell colSpan={2} className={classes.tableCell}>\r\n                            {this.props.t(\"Group\")}\r\n                        </TableCell>\r\n                        <TableCell colSpan={2} className={classes.tableCell}>\r\n                            {this.props.t(\"Everyone\")}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    <TableRow>\r\n                        <TableCell className={classes.tableCell}>\r\n                            {this.props.t(\"read\")}\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            {this.props.t(\"write\")}\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            {this.props.t(\"read\")}\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            {this.props.t(\"write\")}\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            {this.props.t(\"read\")}\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            {this.props.t(\"write\")}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell className={classes.tableCell}>\r\n                            <Checkbox\r\n                                defaultChecked\r\n                                color=\"primary\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            <Checkbox\r\n                                defaultChecked\r\n                                color=\"primary\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            <Checkbox\r\n                                defaultChecked\r\n                                color=\"primary\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            <Checkbox\r\n                                defaultChecked\r\n                                color=\"primary\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            <Checkbox\r\n                                defaultChecked\r\n                                color=\"primary\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            <Checkbox\r\n                                defaultChecked\r\n                                color=\"primary\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                        </TableCell>\r\n                    </TableRow>\r\n                                         \r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    }\r\n    handleChange = (evt, id) =>\r\n    {\r\n        const value = evt.target.value; \r\n        console.log( evt, id, value );\r\n        this.props.onChange( id, value);\r\n        let state = {...this.state};\r\n        state[id] = value;\r\n        this.setState(state);        \r\n    }\r\n}\r\n\r\n\r\nexport default withWidth()\r\n(\r\n    withStyles(styles)(\r\n        ACLDialog\r\n    )\r\n);\r\n\r\n","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\AdapterUpdateDialog.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\AdapterInfoDialog.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\AddInstanceDialog.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\AdapterRow.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\SertificatsDialog.js",["268","269","270","271"],"// SertificatsDialog.js\r\nimport { Component } from 'react';\r\nimport clsx from 'clsx';\r\nimport Dropzone from 'react-dropzone'\r\n\r\nimport withWidth from '@material-ui/core/withWidth';\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nimport Fab from '@material-ui/core/Fab'; \r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport blueGrey from '@material-ui/core/colors/blueGrey' \r\n\r\n\r\n// icons\r\n\r\n\r\n\r\nconst styles = theme => ({\r\n    tabPanel: {\r\n        width:      '100%',\r\n        height:     '100% ',\r\n        overflow:   'auto',\r\n        padding:    15,\r\n        position:   \"relative\",\r\n        //backgroundColor: blueGrey[ 50 ]\r\n    },\r\n    tableContainer:{\r\n        zIndex:100\r\n    },\r\n    table: \r\n    {\r\n        minWidth: 650,\r\n    },\r\n    buttonPanel :\r\n    {\r\n        paddingBottom: 40,\r\n        display:'flex'\r\n    },\r\n    descrPanel:\r\n    {\r\n        width:\"100%\",\r\n        backgroundColor:\"transparent\",\r\n        marginLeft:40,\r\n        border:\"none\",\r\n        display:'flex',\r\n        alignItems:\"center\"\r\n    },\r\n    littleRow : \r\n    {\r\n        width: 110\r\n    },\r\n    nameRow : \r\n    {\r\n        width: 220\r\n    },\r\n    input : \r\n    {\r\n        width: \"100%\"\r\n    }\r\n});\r\n\r\nclass SertificatsDialog extends Component \r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        const arr = Object.keys(props.native.certificates)\r\n            .map(e => { return  {data : props.native.certificates[e], title : e} } )\r\n        \r\n        this.state = {\r\n            ...props,\r\n            arr     : arr,\r\n            chclass : false\r\n        }\r\n\r\n    }\r\n    render()\r\n    {\r\n        //console.log( this.props );\r\n        const { classes } = this.props; \r\n        const rows = this.state.arr.map((e, i) =>\r\n        {\r\n            return <TableRow key={e.title + e.data} >\r\n                <TableCell className={this.props.classes.littleRow}>\r\n                    {i + 1}\r\n                </TableCell>\r\n                <TableCell className={this.props.classes.nameRow}>                               \r\n                    <TextField \r\n                        defaultValue={e.title}\r\n                        InputLabelProps={{\r\n                            readOnly: false,\r\n                            shrink: true,\r\n                        }} \r\n                        className={this.props.classes.input}\r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <TextField\r\n                        id=\"default\" \r\n                        defaultValue={ e.data }\r\n                        InputLabelProps={{\r\n                            readOnly: false,\r\n                            shrink: true,\r\n                        }}\r\n                        className={this.props.classes.input}\r\n                        onChange={evt => this.onChangeText(evt, e.title) }\r\n                    />\r\n                </TableCell>\r\n                <TableCell className={this.props.classes.littleRow}>\r\n                    <Fab\r\n                        size=\"small\"  \r\n                        color=\"secondary\" \r\n                        aria-label=\"add\" \r\n                        onClick={evt => this.onDelete( i )}\r\n                    >\r\n                       <DeleteIcon />\r\n                    </Fab>\r\n                </TableCell>\r\n            </TableRow>\r\n        })\r\n        return <div className={ classes.tabPanel }>\r\n            <Dropzone \r\n                noClick \r\n                accept=\"text/plain,application/json\"\r\n            >\r\n            {({ getRootProps, getInputProps, acceptedFiles, fileRejections }) => (\r\n                <div {...getRootProps({ \r\n                    accept:  \"text/plain\",\r\n                    className   : clsx( this.state.chclass ? \"drop-container drop-dop\" : 'drop-container'),\r\n                    onDragEnter : evt => {\r\n                        //console.log( getRootProps(), evt );\r\n                        this.setState({chclass : true}) \r\n                    },\r\n                    onDragLeave : evt => {\r\n                        //console.log( \"onDragLeave\", evt, acceptedFiles, fileRejections ) \r\n                        this.setState({chclass : false}) \r\n                    },\r\n                    onDrop      : evt => {\r\n                        //console.log( \"onDrop\", evt, acceptedFiles, fileRejections );\r\n                        if( fileRejections.length > 0 ) \r\n                        {\r\n                            //console.log( \"onDrop fileRejections\", fileRejections);\r\n                            let msg = [];\r\n                            fileRejections.map((e =>\r\n                                {\r\n                                    let m = e.file.name + \": \", mm = [];\r\n                                    e.errors.forEach(ee =>\r\n                                        {\r\n                                           mm.push( ee.message );\r\n                                        })\r\n                                    msg.push( m + mm.join( \",\" ) );   \r\n                                }));\r\n                            alert(msg.join(\", \"))\r\n                        }\r\n                        if( acceptedFiles.length > 0 )\r\n                        {\r\n                            //console.log( \"onDrop acceptedFiles\", acceptedFiles);\r\n                            acceptedFiles.map(file =>\r\n                            {\r\n                                var reader = new FileReader();\r\n                                reader.onload = async (e) =>\r\n                                { \r\n                                    //console.log( file.name ); \r\n                                    //console.log( e.target.result ); \r\n                                    let arr = [...this.state.arr];\r\n                                    let name = file.name;\r\n                                    name =  name.split(\".\");   \r\n                                    name.splice( name.length - 1, 100 ) \r\n                                    arr.push({\r\n                                        data: e.target.result,\r\n                                        title:  name.join(\".\")\r\n                                    });\r\n                                    this.setState({arr});\r\n                                    let dat = {};\r\n                                    arr.forEach(ar =>\r\n                                    {\r\n                                        dat[ar.title] = ar.data;\r\n                                    })\r\n                                    this.props.onChange( \r\n                                        \"native\", \r\n                                        {\r\n                                            certificates : dat\r\n                                        }\r\n                                    );\r\n                                };\r\n                                reader.readAsText(file);\r\n                            })\r\n                            \r\n                        }\r\n                        else if(fileRejections.length == 0)\r\n                        {\r\n                            alert(\"No files exists\")\r\n                        }\r\n                        this.setState({chclass : false}) \r\n                    }\r\n                })}>\r\n                    <input {...getInputProps()} /> \r\n                </div>\r\n            )}\r\n            </Dropzone>\r\n            <div className={ classes.buttonPanel }>\r\n                <Fab \r\n                    size=\"small\"  \r\n                    color=\"primary\" \r\n                    aria-label=\"add\"\r\n                    onClick={this.onAdd}\r\n                >\r\n                    <AddIcon />\r\n                </Fab>\r\n                <Paper variant=\"outlined\" className={ classes.descrPanel }>\r\n                    {\r\n                        this.props.t(\r\n                            \"вы можете использовать абсолютный путь к сертификату, например '/opt/certs/cert.pem', или просто перетащить файл сюда\"\r\n                        )\r\n                    }\r\n                </Paper>\r\n            </div>\r\n            <TableContainer className={classes.tableContainer}>\r\n                <Table className={classes.table} aria-label=\"customized table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className={this.props.classes.littleRow}> </TableCell>\r\n                            <TableCell className={this.props.classes.nameRow}>\r\n                                {this.props.t(\"name\")}\r\n                            </TableCell>\r\n                            <TableCell>{this.props.t(\"Sertificate\")}</TableCell>\r\n                            <TableCell className={this.props.classes.littleRow}> </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        { rows }                        \r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    }\r\n    onChangeText = (evt, id) =>\r\n    {\r\n        const value = evt.target.value; \r\n        this.props.onChange( id, value);\r\n        console.log( id, value );\r\n        let state = {...this.state};\r\n        state[id] = value;\r\n        this.setState(state);        \r\n    }\r\n    onDelete = i =>\r\n    {\r\n        let arr = [...this.state.arr];\r\n        arr.splice(i, 1);\r\n        console.log(arr, i )\r\n        this.setState({arr});\r\n    }\r\n    onAdd = () =>\r\n    {\r\n        let arr = [...this.state.arr];\r\n        arr.push({\r\n            link: \"\",\r\n            title: \"\"  \r\n        });\r\n        this.setState({arr});\r\n    }\r\n}\r\n\r\n\r\nexport default withWidth()\r\n(\r\n    withStyles(styles)(\r\n        SertificatsDialog\r\n    )\r\n);\r\n\r\n\r\n\r\n","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\MainSettingsDialog.js",["272","273","274","275"],"import { Component } from 'react';\r\n\r\nimport { MapContainer as LeafletMap, TileLayer, Marker, Popup } from 'react-leaflet';\r\n\r\nimport withWidth from '@material-ui/core/withWidth';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n// colors\r\nimport blueGrey from '@material-ui/core/colors/blueGrey'\r\n\r\n// icons\r\n\r\n//data\r\nimport countries from \"../assets/json/countries\";\r\n\r\nconst styles = theme => ({\r\n    tabPanel: \r\n    {\r\n        width:      '100%',\r\n        height:     '100% ',\r\n        overflow:   'auto',\r\n        overflowX   : \"hidden\",\r\n        padding:    15,\r\n        //backgroundColor: blueGrey[ 50 ]\r\n    } ,\r\n    formControl: \r\n    {\r\n        margin: theme.spacing(1),\r\n        minWidth: \"100%\",\r\n     },\r\n    selectEmpty: \r\n    {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    descrPanel:\r\n    {\r\n        width:\"100%\",\r\n        // backgroundColor:\"transparent\",\r\n        padding :16,\r\n        // border:\"none\",\r\n        display:'flex',\r\n        alignItems:\"center\"\r\n    },\r\n});\r\n\r\nclass MainSettingsDialog extends Component \r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={\r\n            values:[],\r\n            ...props\r\n        }\r\n\r\n    }\r\n    componentDidMount()\r\n    {\r\n        console.log(\"mount\")\r\n\r\n    }\r\n    getSettings()\r\n    {\r\n        return [\r\n            {\r\n                id      : \"language\",\r\n                title   : \"System language:\",       \r\n                values  : [\r\n                    {\r\n                        id:\"en\",\r\n                        title:\"English\"\r\n                    },\r\n                    {\r\n                        id:\"ge\",\r\n                        title:\"Deutsch\"\r\n                    },\r\n                    {\r\n                        id:\"ru\",\r\n                        title:\"русский\"\r\n                    },\r\n                    {\r\n                        id:\"po\",\r\n                        title:\"Portugues\"\r\n                    },\r\n                    {\r\n                        id:\"nd\",\r\n                        title:\"Nederlands\"\r\n                    },\r\n                    {\r\n                        id:\"fr\",\r\n                        title:\"français\"\r\n                    },\r\n                    {\r\n                        id:\"it\",\r\n                        title:\"Italiano\"\r\n                    },\r\n                    {\r\n                        id:\"sp\",\r\n                        title:\"Espanol\"\r\n                    },\r\n                    {\r\n                        id:\"pl\",\r\n                        title:\"Polski\"\r\n                    },\r\n                    {\r\n                        id:\"ch\",\r\n                        title:\"简体中文\"\r\n                    }\r\n                ]      \r\n            },\r\n            {\r\n                id:\"tempUnit\",\r\n                title:\"Temperature units\",\r\n                values: [\r\n                    {\r\n                        id:\"°C\",\r\n                        title:\"°C\"\r\n                    },\r\n                    {\r\n                        id:\"°F\",\r\n                        title:\"°F\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                id:\"currency\",\r\n                title:\"Currency sign\",\r\n                values: [\r\n                    {\r\n                        id:\"€\",\r\n                        title:\"€\"\r\n                    },\r\n                    {\r\n                        id:\"$\",\r\n                        title:\"$\"\r\n                    },\r\n                    {\r\n                        id:\"₽\",\r\n                        title:\"₽\"\r\n                    },\r\n                    {\r\n                        id:\"₤\",\r\n                        title:\"₤\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                id:\"dateFormat\",\r\n                title:\"Date format\",\r\n                values: [\r\n                    {\r\n                        id:\"DD.MM.YYYY\",\r\n                        title:\"DD.MM.YYYY\"\r\n                    },\r\n                    {\r\n                        id:\"DD.MM.YY\",\r\n                        title:\"DD.MM.YY\"\r\n                    },\r\n                    {\r\n                        id:\"DD/MM/YYYY\",\r\n                        title:\"DD/MM/YYYY\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                id:\"isFloatComma\",\r\n                title:\"Date Float comma sign\",\r\n                values: [\r\n                    {\r\n                        id:true,\r\n                        title:\"comma\"\r\n                    },\r\n                    {\r\n                        id:false,\r\n                        title:\"point\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                id:\"defaultHistory\",\r\n                title:\"Default History\",\r\n                values: [\r\n                   \r\n                ]\r\n            },\r\n            {\r\n                id:\"activeRepo\",\r\n                title:\"Default Repository\",\r\n                values: [\r\n                    {\r\n                        id:\"default\",\r\n                        title:\"Stable (default)\"\r\n                    },\r\n                    {\r\n                        id:\"latest\",\r\n                        title:\"Beta (latest)\"\r\n                    },\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n    render()\r\n    {\r\n        //console.log(this.state)\r\n        const {classes} = this.props;        \r\n        const selectors = this.getSettings().map((e,i) =>\r\n        {\r\n            return this.getSelect( e, i )\r\n        }) \r\n        const center = [\r\n            this.state.latitude   ? this.state.latitude : 50,\r\n            this.state.longitude  ? this.state.longitude : 10\r\n        ]\r\n        return <div className={ classes.tabPanel }>\r\n            <Grid container spacing={6}>\r\n                <Grid item xs={6}> \r\n                    <Paper variant=\"outlined\" className={ classes.descrPanel }>\r\n                        { this.props.t( \"cert_path_note\" ) }\r\n                    </Paper>\r\n                    <Grid container spacing={3}>\r\n                        {selectors}\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <LeafletMap\r\n                        center={center}\r\n                        zoom={14}\r\n                        maxZoom={18}\r\n                        attributionControl={true}\r\n                        zoomControl={true}\r\n                        doubleClickZoom={true}\r\n                        scrollWheelZoom={true}\r\n                        dragging={true}\r\n                        animate={true}\r\n                        easeLinearity={0.35}\r\n                        whenCreated={this.onMap} \r\n                    >\r\n                        <TileLayer\r\n                            url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'\r\n                        />\r\n                        \r\n                    </LeafletMap>\r\n                </Grid>\r\n                \r\n            </Grid>\r\n            <Grid container spacing={6}>\r\n                <Grid item xs={3}>\r\n                    {this.getCounters()}\r\n                </Grid>\r\n                <Grid item xs={3}> \r\n                    <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink id={ \"city-label\"}>\r\n                            { this.props.t(\"City\")}\r\n                        </InputLabel>\r\n                        <TextField\r\n                            id=\"city\"\r\n                            label=\"City\"\r\n                            value={ this.state.city }\r\n                            InputLabelProps={{\r\n                                readOnly: false,\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={evt => this.onChangeText(evt, \"city\") }\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={3}> \r\n                    <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink id={ \"latitude-label\"}>\r\n                            { this.props.t(\"Latitude\")}\r\n                        </InputLabel>\r\n                        <TextField\r\n                            id=\"latitude\"\r\n                            label=\"Latitude\"\r\n                            value={ this.state.latitude }\r\n                            InputLabelProps={{\r\n                                readOnly: false,\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={evt => this.onChangeText(evt, \"latitude\") }\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item xs={3}> \r\n                    <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink id={ \"longitude-label\"}>\r\n                            { this.props.t(\"Longitude\")}\r\n                        </InputLabel>\r\n                        <TextField\r\n                            id=\"longitude\"\r\n                            label=\"Longitude\"\r\n                            value={ this.state.longitude }\r\n                            InputLabelProps={{\r\n                                readOnly: false,\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={evt => this.onChangeText(evt, \"longitude\") }\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n\r\n    }\r\n    onMap = map =>\r\n    {\r\n        //console.log(map);\r\n        //console.log(window.L);\r\n        const center = [\r\n            this.state.latitude   ? this.state.latitude : 50,\r\n            this.state.longitude  ? this.state.longitude : 10\r\n        ]\r\n        var marker = window.L.marker(\r\n            center, \r\n            {\r\n                draggable:true,\r\n                title:\"Resource location\",\r\n                alt:\"Resource Location\",\r\n                riseOnHover:true\r\n           }\r\n        )\r\n            .addTo(map)\r\n                .bindPopup(\" Popup for any custom information.\")\r\n                    .on({\r\n                         dragend: evt => this.onMarkerDragend(evt)\r\n                    });\r\n\r\n        map.on({  click: evt => console.log(evt.latlng.lat)  }); \r\n        /*\r\n        var elements = document.getElementsByClassName(\"leaflet-marker-icon\");\r\n        while(elements.length > 0){\r\n           // elements[0].parentNode.removeChild(elements[0]);\r\n        }\r\n        */\r\n    }\r\n    getSelect( e, i )\r\n    {\r\n        const {classes} = this.props;\r\n        const value = this.state[this.getSettings()[i].id];\r\n        //console.log( this.getSettings()[i].id, value );\r\n        const items = this.getSettings()[i].values.map((elem, index)=>\r\n        {\r\n             return <MenuItem value={elem.id} key={index}>\r\n                 { this.props.t(elem.title) }\r\n             </MenuItem>   \r\n        } )\r\n        return  <Grid item xs={6} key={i} >\r\n             <FormControl className={classes.formControl}>\r\n                <InputLabel shrink id={e.id + \"-label\"}>\r\n                    { this.props.t(this.getSettings()[i].title)}\r\n                </InputLabel>\r\n                <Select\r\n                    className={classes.formControl}\r\n                    id={e.id}\r\n                    value={ value }\r\n                    onChange={ evt => this.handleChange(evt, i) }\r\n                    displayEmpty \r\n                    inputProps={{ 'aria-label': 'Without label' }}\r\n                > \r\n                    {items}\r\n                </Select> \r\n            </FormControl> \r\n        </Grid >\r\n\r\n    }\r\n    getCounters = () =>\r\n    {\r\n        const {classes} = this.props;\r\n        const items = countries.map((elem, index) =>\r\n        {\r\n            return <MenuItem value={elem.name} key={index}>\r\n                { this.props.t(elem.name) }\r\n            </MenuItem> \r\n        })\r\n        return <FormControl className={classes.formControl}>\r\n            <InputLabel shrink id={\"country-label\"}>\r\n                { this.props.t(\"Country\")}\r\n            </InputLabel>\r\n            <Select\r\n                className={classes.formControl}\r\n                id={\"country\"}\r\n                value={ this.state.country }\r\n                onChange={ this.handleChangeCountry }\r\n                displayEmpty \r\n                inputProps={{ 'aria-label': 'Without label' }}\r\n            > \r\n                {items}\r\n            </Select> \r\n        </FormControl> \r\n    }\r\n    handleChangeCountry = evt  =>\r\n    {\r\n        const value = evt.target.value; \r\n        const id = \"country\";\r\n        this.props.onChange( id, value);\r\n        console.log( id, value );\r\n        let state = {...this.state};\r\n        state[id] = value;\r\n        this.setState(state);\r\n    }\r\n    onChangeText = (evt, id) =>\r\n    {\r\n        const value = evt.target.value; \r\n        this.props.onChange( id, value);\r\n        console.log( id, value );\r\n        let state = {...this.state};\r\n        state[id] = value;\r\n        this.setState(state);        \r\n    }\r\n    handleChange = (evt, selectId) =>\r\n    {\r\n        const value = evt.target.value; \r\n        const id = this.getSettings()[selectId].id;\r\n        this.props.onChange( id, value);\r\n        console.log( id, value );\r\n        let state = {...this.state};\r\n        state[id] = value;\r\n        this.setState(state);\r\n    }\r\n    onMarkerDragend = evt =>\r\n    {\r\n        const ll = evt.target._latlng;\r\n        //console.log(ll)\r\n        this.props.onChange( \"latitude\",  ll.lat);\r\n        this.props.onChange( \"longitude\", ll.lng);\r\n        this.setState({\r\n           latitude  : ll.lat,\r\n           longitude : ll.lng\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default withWidth()\r\n(\r\n    withStyles(styles)(\r\n        MainSettingsDialog\r\n    )\r\n);\r\n","C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\AdapterDeletionDialog.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\RepositoriesDialog.js",["276"],"// RepositoriesDialog\r\nimport { Component } from 'react';\r\n\r\nimport withWidth from '@material-ui/core/withWidth';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab'; \r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport blueGrey from '@material-ui/core/colors/blueGrey' \r\n\r\n\r\n// icons\r\n\r\nconst styles = theme => ({\r\n    tabPanel: {\r\n        width:      '100%',\r\n        height:     '100% ',\r\n        overflow:   'auto',\r\n        padding:    15,\r\n        //backgroundColor: blueGrey[ 50 ]\r\n    },\r\n    table: \r\n    {\r\n        minWidth: 650,\r\n    },\r\n    buttonPanel :\r\n    {\r\n        paddingBottom: 40,\r\n        display:'flex'\r\n    },\r\n    descrPanel:\r\n    {\r\n        width:\"100%\",\r\n        backgroundColor:\"transparent\",\r\n        marginLeft:40,\r\n        border:\"none\",\r\n        display:'flex',\r\n        alignItems:\"center\"\r\n    },\r\n    littleRow : \r\n    {\r\n        width: 110\r\n    },\r\n    nameRow : \r\n    {\r\n        width: 220\r\n    },\r\n    input : \r\n    {\r\n        width: \"100%\"\r\n    }\r\n});\r\n\r\nclass RepositoriesDialog extends Component \r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        const arr = Object.keys(props)\r\n            .filter((e,i) => props[e] && typeof props[e].link === \"string\" )\r\n                .map(e => { return  {...props[e], title:e} } )\r\n        \r\n        this.state={\r\n            ...props,\r\n            arr     : arr\r\n        }\r\n\r\n    }\r\n    render()\r\n    {\r\n        const { classes } = this.props; \r\n        console.log( this.state );\r\n        const rows = this.state.arr.map((e, i) =>\r\n        {\r\n            return <TableRow key={e.title + e.link} >\r\n                <TableCell className={this.props.classes.littleRow}>\r\n                    {i + 1}\r\n                </TableCell>\r\n                <TableCell className={this.props.classes.nameRow}>                               \r\n                    <TextField \r\n                        defaultValue={e.title}\r\n                        InputLabelProps={{\r\n                            readOnly: false,\r\n                            shrink: true,\r\n                        }} \r\n                        className={this.props.classes.input}\r\n                    />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <TextField\r\n                        id=\"default\" \r\n                        defaultValue={ e.link }\r\n                        InputLabelProps={{\r\n                            readOnly: false,\r\n                            shrink: true,\r\n                        }}\r\n                        className={this.props.classes.input}\r\n                        onChange={evt => this.onChangeText(evt, e.title) }\r\n                    />\r\n                </TableCell>\r\n                <TableCell className={this.props.classes.littleRow}>\r\n                    <Fab\r\n                        size=\"small\"  \r\n                        color=\"secondary\" \r\n                        aria-label=\"add\" \r\n                        onClick={evt => this.onDelete( i )}\r\n                    >\r\n                       <DeleteIcon />\r\n                    </Fab>\r\n                </TableCell>\r\n            </TableRow>\r\n        })\r\n        return <div className={ classes.tabPanel }>\r\n            <div className={ classes.buttonPanel }>\r\n                <Fab \r\n                    size=\"small\"  \r\n                    color=\"primary\" \r\n                    aria-label=\"add\"\r\n                    onClick={this.onAdd}\r\n                >\r\n                    <AddIcon />\r\n                </Fab>\r\n                <Paper variant=\"outlined\" className={ classes.descrPanel }>\r\n                    { this.props.t( \"cert_path_note\" ) }\r\n                </Paper>\r\n            </div>\r\n            <TableContainer>\r\n                <Table className={classes.table} aria-label=\"customized table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className={this.props.classes.littleRow}> </TableCell>\r\n                            <TableCell className={this.props.classes.nameRow}>\r\n                                {this.props.t(\"name\")}\r\n                            </TableCell>\r\n                            <TableCell>{this.props.t(\"link\")}</TableCell>\r\n                            <TableCell className={this.props.classes.littleRow}> </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        { rows }                        \r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n\r\n    }\r\n    onChangeText = (evt, id) =>\r\n    {\r\n        const value = evt.target.value; \r\n        this.props.onChange( id, value);\r\n        console.log( id, value );\r\n        let state = {...this.state};\r\n        state[id] = value;\r\n        this.setState(state);        \r\n    }\r\n    onDelete = i =>\r\n    {\r\n        let arr = [...this.state.arr];\r\n        arr.splice(i, 1);\r\n        console.log(arr, i )\r\n        this.setState({arr});\r\n    }\r\n    onAdd = () =>\r\n    {\r\n        let arr = [...this.state.arr];\r\n        arr.push({\r\n            link: \"\",\r\n            title: \"\"  \r\n        });\r\n        this.setState({arr});\r\n    }\r\n}\r\n\r\n\r\nexport default withWidth()\r\n(\r\n    withStyles(styles)(\r\n        RepositoriesDialog\r\n    )\r\n);\r\n","C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsLog.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsPlugins.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsObjects.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsMultihost.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsStates.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsSystem.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\EditIntroLinkDialog.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\IntroCard.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\FileBrowser.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\InstanceInfo.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\State.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\Config.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\WizardLicenseTab.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\WizardSettingsTab.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\WizardPasswordTab.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\dialogs\\CameraIntroDialog.js",[],"C:\\pWork\\ioBroker.admin\\src-rx\\src\\components\\DrawerItem.js",[],{"ruleId":"277","replacedBy":"278"},{"ruleId":"279","replacedBy":"280"},{"ruleId":"281","severity":1,"message":"282","line":30,"column":8,"nodeType":"283","messageId":"284","endLine":30,"endColumn":17},{"ruleId":"285","severity":1,"message":"286","line":219,"column":20,"nodeType":"287","messageId":"288","endLine":221,"endColumn":15,"fix":"289"},{"ruleId":"290","severity":1,"message":"291","line":220,"column":25,"nodeType":"292","messageId":"293","endLine":220,"endColumn":27},{"ruleId":"290","severity":1,"message":"291","line":220,"column":74,"nodeType":"292","messageId":"293","endLine":220,"endColumn":76},{"ruleId":"294","severity":1,"message":"295","line":225,"column":13,"nodeType":"296","endLine":233,"endColumn":15},{"ruleId":"281","severity":1,"message":"297","line":63,"column":16,"nodeType":"283","messageId":"284","endLine":63,"endColumn":22},{"ruleId":"281","severity":1,"message":"297","line":137,"column":16,"nodeType":"283","messageId":"284","endLine":137,"endColumn":22},{"ruleId":"281","severity":1,"message":"298","line":8,"column":8,"nodeType":"283","messageId":"284","endLine":8,"endColumn":18},{"ruleId":"281","severity":1,"message":"299","line":15,"column":8,"nodeType":"283","messageId":"284","endLine":15,"endColumn":16},{"ruleId":"281","severity":1,"message":"300","line":7,"column":29,"nodeType":"283","messageId":"284","endLine":7,"endColumn":38},{"ruleId":"281","severity":1,"message":"299","line":18,"column":8,"nodeType":"283","messageId":"284","endLine":18,"endColumn":16},{"ruleId":"301","severity":1,"message":"302","line":89,"column":56,"nodeType":"292","messageId":"303","endLine":89,"endColumn":57},{"ruleId":"301","severity":1,"message":"302","line":106,"column":61,"nodeType":"292","messageId":"303","endLine":106,"endColumn":62},{"ruleId":"281","severity":1,"message":"299","line":22,"column":8,"nodeType":"283","messageId":"284","endLine":22,"endColumn":16},{"ruleId":"304","severity":1,"message":"305","line":155,"column":51,"nodeType":"306","messageId":"307","endLine":155,"endColumn":53},{"ruleId":"304","severity":1,"message":"305","line":169,"column":52,"nodeType":"306","messageId":"307","endLine":169,"endColumn":54},{"ruleId":"290","severity":1,"message":"291","line":201,"column":55,"nodeType":"292","messageId":"293","endLine":201,"endColumn":57},{"ruleId":"281","severity":1,"message":"308","line":3,"column":49,"nodeType":"283","messageId":"284","endLine":3,"endColumn":55},{"ruleId":"281","severity":1,"message":"309","line":3,"column":57,"nodeType":"283","messageId":"284","endLine":3,"endColumn":62},{"ruleId":"281","severity":1,"message":"299","line":16,"column":8,"nodeType":"283","messageId":"284","endLine":16,"endColumn":16},{"ruleId":"281","severity":1,"message":"310","line":320,"column":13,"nodeType":"283","messageId":"284","endLine":320,"endColumn":19},{"ruleId":"281","severity":1,"message":"299","line":20,"column":8,"nodeType":"283","messageId":"284","endLine":20,"endColumn":16},"no-native-reassign",["311"],"no-negated-in-lhs",["312"],"no-unused-vars","'lightBlue' is defined but never used.","Identifier","unusedVar","no-whitespace-before-property","Unexpected whitespace before property 0.","MemberExpression","unexpectedWhitespace",{"range":"313","text":"314"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-pascal-case","Imported JSX component _Component must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'common' is assigned a value but never used.","'InputLabel' is defined but never used.","'blueGrey' is defined but never used.","'TextField' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Marker' is defined but never used.","'Popup' is defined but never used.","'marker' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[9054,9055],""]