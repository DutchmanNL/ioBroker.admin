[{"D:\\#work\\ioBroker.admin\\src-rx\\src\\index.js":"1","D:\\#work\\ioBroker.admin\\src-rx\\src\\App.js":"2","D:\\#work\\ioBroker.admin\\src-rx\\src\\Theme.js":"3","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\Connecting.js":"4","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\Connection.js":"5","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\LogsWorker.js":"6","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\Drawer.js":"7","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\InstancesWorker.js":"8","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\WizardDialog.js":"9","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\HostsWorker.js":"10","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\CommandDialog.js":"11","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\ConfirmDialog.js":"12","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\SystemSettingsDialog.js":"13","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\BaseSettingsDialog.js":"14","D:\\#work\\ioBroker.admin\\src-rx\\src\\login\\Login.js":"15","D:\\#work\\ioBroker.admin\\src-rx\\src\\tabs\\Adapters.js":"16","D:\\#work\\ioBroker.admin\\src-rx\\src\\tabs\\Instances.js":"17","D:\\#work\\ioBroker.admin\\src-rx\\src\\tabs\\Objects.js":"18","D:\\#work\\ioBroker.admin\\src-rx\\src\\tabs\\Intro.js":"19","D:\\#work\\ioBroker.admin\\src-rx\\src\\tabs\\Logs.js":"20","D:\\#work\\ioBroker.admin\\src-rx\\src\\tabs\\Files.js":"21","D:\\#work\\ioBroker.admin\\src-rx\\src\\tabs\\CustomTab.js":"22","D:\\#work\\ioBroker.admin\\src-rx\\src\\Utils.js":"23","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\DrawerItem.js":"24","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\WizardSettingsTab.js":"25","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\TabHeader.js":"26","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\TabContent.js":"27","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\TabContainer.js":"28","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\FileBrowser.js":"29","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\EditIntroLinkDialog.js":"30","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\IntroCard.js":"31","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\ObjectBrowserValue.js":"32","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\ObjectBrowserEditObject.js":"33","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\ObjectCustomDialog.js":"34","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\State.js":"35","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\ObjectBrowser.js":"36","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\InstanceInfo.js":"37","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\Config.js":"38","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\AdapterRow.js":"39","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\AddInstanceDialog.js":"40","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\AdapterUpdateDialog.js":"41","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\AdapterInfoDialog.js":"42","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\AdapterDeletionDialog.js":"43","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsPlugins.js":"44","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsLog.js":"45","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsStates.js":"46","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsObjects.js":"47","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsSystem.js":"48","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsMultihost.js":"49","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\WizardLicenseTab.js":"50","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\WizardPasswordTab.js":"51","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\CameraIntroDialog.js":"52","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\ObjectHistoryData.js":"53","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\ObjectCustomEditor.js":"54","D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\ObjectChart.js":"55","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\MainSettingsDialog.js":"56","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\RepositoriesDialog.js":"57","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\SertificatsDialog.js":"58","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\SSLDialog.js":"59","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\ACLDialog.js":"60","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\StatisticsDialog.js":"61"},{"size":1197,"mtime":1610515482052,"results":"62","hashOfConfig":"63"},{"size":37995,"mtime":1616147419884,"results":"64","hashOfConfig":"63"},{"size":5650,"mtime":1616147612356,"results":"65","hashOfConfig":"63"},{"size":2139,"mtime":1610515482037,"results":"66","hashOfConfig":"63"},{"size":65810,"mtime":1610515482038,"results":"67","hashOfConfig":"63"},{"size":8828,"mtime":1610515482039,"results":"68","hashOfConfig":"63"},{"size":14661,"mtime":1610515482038,"results":"69","hashOfConfig":"63"},{"size":3642,"mtime":1610515482039,"results":"70","hashOfConfig":"63"},{"size":7781,"mtime":1610515482046,"results":"71","hashOfConfig":"63"},{"size":2573,"mtime":1610515482039,"results":"72","hashOfConfig":"63"},{"size":10590,"mtime":1610515482045,"results":"73","hashOfConfig":"63"},{"size":1813,"mtime":1610515482045,"results":"74","hashOfConfig":"63"},{"size":15823,"mtime":1616091122536,"results":"75","hashOfConfig":"63"},{"size":12128,"mtime":1610983332145,"results":"76","hashOfConfig":"63"},{"size":4992,"mtime":1610515482052,"results":"77","hashOfConfig":"63"},{"size":31307,"mtime":1610515482052,"results":"78","hashOfConfig":"63"},{"size":33093,"mtime":1610515482053,"results":"79","hashOfConfig":"63"},{"size":6924,"mtime":1610515482054,"results":"80","hashOfConfig":"63"},{"size":22234,"mtime":1610515482053,"results":"81","hashOfConfig":"63"},{"size":21900,"mtime":1610515482054,"results":"82","hashOfConfig":"63"},{"size":1509,"mtime":1610515482053,"results":"83","hashOfConfig":"63"},{"size":3633,"mtime":1610515482052,"results":"84","hashOfConfig":"63"},{"size":6344,"mtime":1610515482026,"results":"85","hashOfConfig":"63"},{"size":2748,"mtime":1610515482038,"results":"86","hashOfConfig":"63"},{"size":40676,"mtime":1610515482044,"results":"87","hashOfConfig":"63"},{"size":432,"mtime":1610515482043,"results":"88","hashOfConfig":"63"},{"size":847,"mtime":1610515482043,"results":"89","hashOfConfig":"63"},{"size":1280,"mtime":1610515482043,"results":"90","hashOfConfig":"63"},{"size":52489,"mtime":1610515482038,"results":"91","hashOfConfig":"63"},{"size":17088,"mtime":1610515482045,"results":"92","hashOfConfig":"63"},{"size":16025,"mtime":1610515482039,"results":"93","hashOfConfig":"63"},{"size":9045,"mtime":1610515482040,"results":"94","hashOfConfig":"63"},{"size":4123,"mtime":1610515482040,"results":"95","hashOfConfig":"63"},{"size":6905,"mtime":1610515482045,"results":"96","hashOfConfig":"63"},{"size":1490,"mtime":1610515482041,"results":"97","hashOfConfig":"63"},{"size":131032,"mtime":1610515482040,"results":"98","hashOfConfig":"63"},{"size":883,"mtime":1610515482039,"results":"99","hashOfConfig":"63"},{"size":2955,"mtime":1610515482045,"results":"100","hashOfConfig":"63"},{"size":10679,"mtime":1610515482036,"results":"101","hashOfConfig":"63"},{"size":5708,"mtime":1610515482044,"results":"102","hashOfConfig":"63"},{"size":5334,"mtime":1610515482044,"results":"103","hashOfConfig":"63"},{"size":6963,"mtime":1610515482044,"results":"104","hashOfConfig":"63"},{"size":2751,"mtime":1610515482044,"results":"105","hashOfConfig":"63"},{"size":3131,"mtime":1610515482036,"results":"106","hashOfConfig":"63"},{"size":40676,"mtime":1610515482036,"results":"107","hashOfConfig":"63"},{"size":16237,"mtime":1610515482037,"results":"108","hashOfConfig":"63"},{"size":17482,"mtime":1610515482036,"results":"109","hashOfConfig":"63"},{"size":8748,"mtime":1610515482037,"results":"110","hashOfConfig":"63"},{"size":5036,"mtime":1610515482036,"results":"111","hashOfConfig":"63"},{"size":6643,"mtime":1610515482043,"results":"112","hashOfConfig":"63"},{"size":5528,"mtime":1610515482043,"results":"113","hashOfConfig":"63"},{"size":4495,"mtime":1610515482045,"results":"114","hashOfConfig":"63"},{"size":50158,"mtime":1610515482041,"results":"115","hashOfConfig":"63"},{"size":31834,"mtime":1610515482041,"results":"116","hashOfConfig":"63"},{"size":30947,"mtime":1610515482041,"results":"117","hashOfConfig":"63"},{"size":15271,"mtime":1616168241482,"results":"118","hashOfConfig":"63"},{"size":6268,"mtime":1616132458431,"results":"119","hashOfConfig":"63"},{"size":10634,"mtime":1616145352741,"results":"120","hashOfConfig":"63"},{"size":4644,"mtime":1616132447287,"results":"121","hashOfConfig":"63"},{"size":9671,"mtime":1616132482334,"results":"122","hashOfConfig":"63"},{"size":5525,"mtime":1616166982343,"results":"123","hashOfConfig":"63"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"1of3mmr",{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":4,"source":"151","usedDeprecatedRules":"126"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"238","messages":"239","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"126"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"126"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"126"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"126"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\#work\\ioBroker.admin\\src-rx\\src\\index.js",[],["252","253"],"D:\\#work\\ioBroker.admin\\src-rx\\src\\App.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\Theme.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\Connecting.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\Connection.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\LogsWorker.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\Drawer.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\InstancesWorker.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\WizardDialog.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\HostsWorker.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\CommandDialog.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\ConfirmDialog.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\SystemSettingsDialog.js",["254","255","256","257","258","259","260","261","262"],"import withWidth from '@material-ui/core/withWidth';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nimport ConfirmDialog from '@iobroker/adapter-react/Dialogs/Confirm';\r\nimport Router from '@iobroker/adapter-react/Components/Router';\r\n\r\nimport MainSettingsDialog from \"./MainSettingsDialog\";\r\nimport RepositoriesDialog from \"./RepositoriesDialog\";\r\nimport SertificatsDialog from \"./SertificatsDialog\";\r\nimport SSLDialog from \"./SSLDialog\";\r\nimport ACLDialog from \"./ACLDialog\";\r\nimport StatisticsDialog from \"./StatisticsDialog\";\r\n\r\n// icons\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n//fills\r\nimport lightBlue from '@material-ui/core/colors/lightBlue'\r\n\r\n//style\r\nimport \"../assets/css/style.css\";\r\n\r\n\r\nconst styles = theme => ({\r\n    tabPanel: {\r\n        width: '100%',\r\n        height: 'calc(100% - ' + theme.mixins.toolbar.minHeight + 'px)',\r\n        overflow: 'hidden'\r\n    },\r\n    tab: {\r\n        // backgroundColor:\"#FFF\",\r\n        // color:lightBlue[500]\r\n    },\r\n    dialogTitle : {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        padding:'0 0 0 20px',\r\n    },\r\n    dialog : {\r\n        width:'100%',\r\n        height:'100%',\r\n        maxWidth:'100%' \r\n    },\r\n    content : {\r\n        padding:'0!important'\r\n    }\r\n});\r\n\r\nclass SystemSettingsDialog extends Component \r\n{\r\n    constructor(props) \r\n    {\r\n        super(props);\r\n        this.state =  {\r\n            loading: true,\r\n            confirmExit: false,\r\n            systemSettings: null,\r\n            systemRepositories: null,\r\n        };\r\n        this.getSettings(this.state.currentHost);\r\n    }\r\n    getSettings() \r\n    {\r\n        const newState = {loading: false};\r\n         return this.props.socket.getSystemConfig(true)\r\n            .then(systemSettings => {\r\n                //console.log(systemSettings); \r\n                newState.systemSettings = systemSettings && systemSettings.common ? systemSettings.common : {};\r\n                return this.props.socket.getObject('system.repositories');\r\n            })\r\n                .then(systemRepositories => {\r\n                    systemRepositories = JSON.parse(JSON.stringify(systemRepositories));\r\n                    systemRepositories = systemRepositories || {};\r\n                    systemRepositories.native = systemRepositories.native || {};\r\n                    systemRepositories.native.repositories = systemRepositories.native.repositories || {};\r\n\r\n                    Object.keys(systemRepositories.native.repositories).forEach(repo => {\r\n                        if (systemRepositories.native.repositories[repo] &&\r\n                            systemRepositories.native.repositories[repo].json) {\r\n                            delete systemRepositories.native.repositories[repo].json;\r\n                        }\r\n                        if (systemRepositories.native.repositories[repo] &&\r\n                            systemRepositories.native.repositories[repo].hash) {\r\n                            delete systemRepositories.native.repositories[repo].hash;\r\n                        }\r\n                    });\r\n                    this.originalRepositories = JSON.stringify(systemRepositories.native.repositories);\r\n                    this.originalSettings = JSON.stringify(newState.systemSettings);\r\n                    //console.log(systemRepositories.native.repositories);\r\n                    newState.systemRepositories = systemRepositories.native.repositories;                    \r\n                    return this.props.socket.getObject('system.config');\r\n                })\r\n                \r\n                    .then(systemcConfig => {\r\n                        //console.log(systemcConfig);\r\n                        newState.systemcConfig = systemcConfig;\r\n                        // return this.props.socket.getObject('system.certificates');\r\n                        return this.props.socket.getRawSocket().emit(\r\n                            'sendToHost', \r\n                            this.props.currentHost, \r\n                            'getDiagData', \r\n                            systemcConfig.common.diag, \r\n                            diagData => {\r\n                                //console.log(diagData)\r\n                                newState.diagData = diagData;    \r\n                            });\r\n                    })\r\n                        /**/\r\n                        .then(diagData => {\r\n                            return this.props.socket.getUsers();\r\n                        })\r\n                            .then(users => {\r\n                                //console.log(users);       \r\n                                newState.users = users;                           \r\n                                return this.props.socket.getGroups();\r\n                            })  \r\n                                .then(groups => {\r\n                                    //console.log(groups);   \r\n                                    newState.groups = groups;                             \r\n                                    return this.props.socket.getObject('system.certificates');\r\n                                })                        \r\n                                    .then(systemcCertificates => {\r\n                                        console.log(systemcCertificates);\r\n                                        this.originalCertificates = JSON.stringify( systemcCertificates );\r\n                                        newState.systemcCertificates = systemcCertificates;\r\n                                        this.setState(newState);                            \r\n                                    });\r\n    }\r\n    renderConfirmDialog() \r\n    {\r\n        if (this.state.confirmExit) \r\n        {\r\n            return <ConfirmDialog\r\n                text={ this.props.t('Discard unsaved changes? ')}\r\n                onClose={result =>\r\n                    this.setState({ confirmExit: false }, () =>\r\n                        result && this.props.onClose())}\r\n            />;\r\n        } \r\n        else \r\n        {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    onSave()\r\n    {\r\n        return this.props.socket.getSystemConfig(true)\r\n            .then(systemSettings => {\r\n                systemSettings = systemSettings || {};\r\n                if (JSON.stringify(systemSettings.common) !== JSON.stringify(this.state.systemSettings)) \r\n                {\r\n                    systemSettings.common = this.state.systemSettings;\r\n                    return this.props.socket.setSystemConfig(systemSettings);\r\n                } \r\n                else\r\n                {\r\n                    return Promise.resolve();\r\n                }\r\n            })\r\n                .then(() => this.props.socket.getObject('system.repositories'))\r\n                    .then(systemRepositories => {\r\n                        systemRepositories = systemRepositories || {};\r\n                        systemRepositories.native = systemRepositories.native || {};\r\n                        systemRepositories.native.repositories = systemRepositories.native.repositories || {};\r\n                        const newRepo = JSON.parse(JSON.stringify(this.state.systemRepositories));\r\n\r\n                        // merge new and existing info\r\n                        Object.keys(newRepo).forEach(repo => {\r\n                            if (systemRepositories.native.repositories[repo] && systemRepositories.native.repositories[repo].json) {\r\n                                newRepo[repo].json = systemRepositories.native.repositories[repo].json;\r\n                            }\r\n                            if (systemRepositories.native.repositories[repo] && systemRepositories.native.repositories[repo].hash) {\r\n                                newRepo[repo].hash = systemRepositories.native.repositories[repo].hash;\r\n                            }\r\n                        });\r\n                        systemRepositories.native.repositories = newRepo;\r\n                        return this.props.socket.setObject('system.repositories', systemRepositories);\r\n                    })\r\n                        .catch(e => window.alert('Cannot save system configuration: ' + e));\r\n    }\r\n    \r\n    getTabs()\r\n    {\r\n        return [\r\n            {\r\n                id : 0,\r\n                title: 'System settings',\r\n                component: MainSettingsDialog,\r\n                data: \"systemSettings\"\r\n            },\r\n            {\r\n                id : 1,\r\n                title: 'Repositories',\r\n                component: RepositoriesDialog,\r\n                data: \"systemRepositories\",\r\n                data2:{}\r\n            },\r\n            {\r\n                id : 2,\r\n                title: 'Certificates',\r\n                component: SertificatsDialog,\r\n                data: \"systemcCertificates\",\r\n                data2:{}\r\n            },\r\n            {\r\n                id : 3,\r\n                title: \"Let's encrypt SSL\",\r\n                component: SSLDialog,\r\n                data: \"systemcCertificates\",\r\n                data2:{}\r\n            },\r\n            {\r\n                id : 4,\r\n                title: \"Default ACL\",\r\n                component: ACLDialog,\r\n                data: \"systemcConfig\",\r\n                data2:{}\r\n            },\r\n            {\r\n                id : 5,\r\n                title: \"Statistics\",\r\n                component: StatisticsDialog,\r\n                data: \"systemcConfig\",\r\n                data2: \"diagData\"\r\n            }\r\n        ]\r\n    }\r\n    getDialogContent() { \r\n       if(this.state.loading)\r\n            return  <LinearProgress/> ;\r\n       const _t =  this. getTabs().filter((e, i) => {\r\n           return e.id == (this.props.currentTab.id ).toString() ||  e.id == parseInt(this.props.currentTab.id) \r\n       }) [0] || this. getTabs()[0];\r\n       const _Component =  _t.component;\r\n       const {groups, users} = this.state;\r\n       return <div className={ this.props.classes.tabPanel }> \r\n           <_Component\r\n                onChange={(id, data) => this.onChangedTab(id, data, _t.data) }\r\n                { ...this.state[_t.data] }\r\n                data2= { this.state[_t.data2] } \r\n                users={users}\r\n                themeName={this.props.themeName}\r\n                groups={groups}\r\n                t={this.props.t}\r\n           />\r\n       </div>\r\n    }\r\n    onTab = (event, newTab) => { \r\n        Router.doNavigate(null, 'system', newTab)\r\n    }\r\n    onChangedTab(id, data, param)  {\r\n        let state = {...this.state};\r\n        state[param][id] = data;\r\n        this.setState(state);  \r\n        // console.log( id, data, param, state );\r\n    }\r\n    render() {\r\n        //console.log(this.props)\r\n        const changed = JSON.stringify(this.state.systemSettings)       !== this.originalSettings ||\r\n                        JSON.stringify(this.state.systemRepositories)   !== this.originalRepositories ||\r\n                        JSON.stringify(this.state.systemcCertificates)  !== this.originalCertificates;\r\n        const tabs = this. getTabs().map((e,i) =>\r\n        {\r\n            return  <Tab\r\n                label={ this.props.t( e.title ) } \r\n                id={ (e.id).toString() } \r\n                aria-controls={ 'simple-tabpanel-' +  e.id } \r\n                key={i}\r\n            />;\r\n        })\r\n        const curTab = parseInt(this.props.currentTab.id, 10) || 0;\r\n        return <Dialog\r\n            className={ this.props.classes.dialog }\r\n            classes={{\r\n                root: this.props.classes.dialog,\r\n                paper: \"dialog-setting\"\r\n            }}\r\n            open={ true }\r\n            onClose={ () => {} }\r\n            fullWidth={ false }\r\n            fullScreen={ false }\r\n            aria-labelledby=\"system-settings-dialog-title\"\r\n        >\r\n           { /*\r\n            <DialogTitle id=\"system-settings-dialog-title\">\r\n                { this.props.t('Base settings') }\r\n            </DialogTitle>\r\n            */}\r\n            <DialogContent className={ this.props.classes.content }>\r\n                <AppBar position=\"static\" color=\"default\">\r\n                    <div className={this.props.classes.dialogTitle}>\r\n                        <Typography className=\"dialogName\">\r\n                            { this.props.t('Base settings') }\r\n                        </Typography>\r\n                        <Tabs\r\n                            className={ this.props.classes.tab } \r\n                            indicatorColor=\"primary\"\r\n                            value={ curTab }\r\n                            onChange={ this.onTab }\r\n                            variant=\"scrollable\"\r\n                            scrollButtons=\"auto\" \r\n                            centered\r\n                        >\r\n                            { tabs }\r\n                        </Tabs>\r\n                        <IconButton \r\n                            edge=\"start\" \r\n                            color=\"inherit\" \r\n                            onClick={ () => changed ? this.setState({confirmExit: true}) : this.props.onClose() }\r\n                            aria-label=\"close\"\r\n                        >\r\n                            <CloseIcon />\r\n                        </IconButton>   \r\n                    </div> \r\n              \r\n                </AppBar>\r\n                { this.getDialogContent()  }\r\n                { this.renderConfirmDialog() }\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button \r\n                    variant=\"contained\"\r\n                    disabled={ !changed } \r\n                    onClick={ () => this.onSave() } \r\n                    color=\"primary\"\r\n                >\r\n                    <CheckIcon />\r\n                    { this.props.t('Save') }\r\n                </Button>\r\n                <Button \r\n                    variant=\"contained\" \r\n                    onClick={ () => changed ? this.setState({confirmExit: true}) : this.props.onClose() }\r\n                >\r\n                    <CloseIcon />\r\n                    { changed ? this.props.t('Cancel') : this.props.t('Close') }\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    }\r\n}\r\n\r\nSystemSettingsDialog.propTypes = {\r\n    t: PropTypes.func,\r\n    lang: PropTypes.string,\r\n    socket: PropTypes.object,\r\n    themeName: PropTypes.string,\r\n    onClose: PropTypes.func.isRequired,\r\n    currentTab: PropTypes.object,\r\n};\r\n\r\nexport default withWidth()(withStyles(styles)(SystemSettingsDialog));\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props;\r\n  \r\n    return (\r\n      <div\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`nav-tabpanel-${index}`}\r\n        aria-labelledby={`nav-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && (\r\n          <Box p={3}>\r\n            <Typography>{children}</Typography>\r\n          </Box>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  TabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n  };","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\BaseSettingsDialog.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\login\\Login.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\tabs\\Adapters.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\tabs\\Instances.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\tabs\\Objects.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\tabs\\Intro.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\tabs\\Logs.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\tabs\\Files.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\tabs\\CustomTab.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\Utils.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\DrawerItem.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\WizardSettingsTab.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\TabHeader.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\TabContent.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\TabContainer.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\FileBrowser.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\EditIntroLinkDialog.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\IntroCard.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\ObjectBrowserValue.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\ObjectBrowserEditObject.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\ObjectCustomDialog.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\State.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\ObjectBrowser.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\InstanceInfo.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\Config.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\AdapterRow.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\AddInstanceDialog.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\AdapterUpdateDialog.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\AdapterInfoDialog.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\AdapterDeletionDialog.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsPlugins.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsLog.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsStates.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsObjects.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsSystem.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\BaseSettingsMultihost.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\WizardLicenseTab.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\WizardPasswordTab.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\CameraIntroDialog.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\ObjectHistoryData.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\ObjectCustomEditor.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\components\\ObjectChart.js",[],"D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\MainSettingsDialog.js",["263","264","265","266"],"D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\RepositoriesDialog.js",["267"],"// RepositoriesDialog\r\nimport { Component } from 'react';\r\n\r\nimport withWidth from '@material-ui/core/withWidth';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab'; \r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport blueGrey from '@material-ui/core/colors/blueGrey' \r\n\r\n\r\n// icons\r\n\r\nconst styles = theme => ({\r\n    tabPanel: {\r\n        width:      '100%',\r\n        height:     '100% ',\r\n        overflow:   'auto',\r\n        overflowX:   'hidden',\r\n        padding:    15,\r\n        //backgroundColor: blueGrey[ 50 ]\r\n    },\r\n    table: \r\n    { \r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        width: '100%'\r\n    },\r\n    buttonPanel :\r\n    {\r\n        paddingBottom: 40,\r\n        display:'flex'\r\n    },\r\n    descrPanel:\r\n    {\r\n        width:\"100%\",\r\n        backgroundColor:\"transparent\",\r\n        marginLeft:40,\r\n        border:\"none\",\r\n        display:'flex',\r\n        alignItems:\"center\"\r\n    },\r\n    littleRow : \r\n    {\r\n        width: 110 \r\n    },\r\n    nameRow : \r\n    {\r\n        width: 220 \r\n    },\r\n    input : \r\n    {\r\n        width: \"100%\"\r\n    }\r\n});\r\n\r\nclass RepositoriesDialog extends Component \r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        const arr = Object.keys(props)\r\n            .filter((e,i) => props[e] && typeof props[e].link === \"string\" )\r\n                .map(e => { return  {...props[e], title:e} } )\r\n        \r\n        this.state={\r\n            ...props,\r\n            arr     : arr\r\n        }\r\n\r\n    }\r\n    render()\r\n    {\r\n        const { classes } = this.props; \r\n        console.log( this.state );\r\n        const rows = this.state.arr.map((e, i) =>\r\n        {\r\n            return <TableRow key={e.title + e.link} className=\"float_row\">\r\n                <TableCell className={this.props.classes.littleRow  + \" float_cell \"}>\r\n                    {i + 1}\r\n                </TableCell>\r\n                <TableCell className={this.props.classes.nameRow  + \" float_cell\"}>                               \r\n                    <TextField \r\n                        defaultValue={e.title}\r\n                        InputLabelProps={{\r\n                            readOnly: false,\r\n                            shrink: true,\r\n                        }} \r\n                        className={this.props.classes.input + \" xs-centered\"}\r\n                    />\r\n                </TableCell>\r\n                <TableCell className= \"grow_cell float_cell\">\r\n                    <TextField\r\n                        id=\"default\" \r\n                        defaultValue={ e.link }\r\n                        InputLabelProps={{\r\n                            readOnly: false,\r\n                            shrink: true,\r\n                        }}\r\n                        className={this.props.classes.input + \" xs-centered\"}\r\n                        onChange={evt => this.onChangeText(evt, e.title) }\r\n                    />\r\n                </TableCell>\r\n                <TableCell className={this.props.classes.littleRow  + \" float_cell\"}>\r\n                    <Fab\r\n                        size=\"small\"  \r\n                        color=\"secondary\" \r\n                        aria-label=\"add\" \r\n                        onClick={evt => this.onDelete( i )}\r\n                    >\r\n                       <DeleteIcon />\r\n                    </Fab>\r\n                </TableCell>\r\n            </TableRow>\r\n        })\r\n        return <div className={ classes.tabPanel }>\r\n            <div className={ classes.buttonPanel }>\r\n                <Fab \r\n                    size=\"small\"  \r\n                    color=\"primary\" \r\n                    aria-label=\"add\"\r\n                    onClick={this.onAdd}\r\n                    className=\"small_size\" \r\n                >\r\n                    <AddIcon/>\r\n                </Fab>\r\n                <Paper variant=\"outlined\" className={ classes.descrPanel }>\r\n                    { this.props.t( \"cert_path_note\" ) }\r\n                </Paper>\r\n            </div>\r\n            <TableContainer>\r\n                <Table className={classes.table} aria-label=\"customized table\">\r\n                    <TableHead>\r\n                        <TableRow className=\"float_row\">\r\n                            <TableCell className={this.props.classes.littleRow  + \" float_cell\"}> </TableCell>\r\n                            <TableCell className={this.props.classes.nameRow  + \" float_cell\" }>\r\n                                {this.props.t(\"name\")}\r\n                            </TableCell>\r\n                            <TableCell className= \"grow_cell float_cell\">\r\n                                {this.props.t(\"link\")}\r\n                            </TableCell>\r\n                            <TableCell className={this.props.classes.littleRow  + \" float_cell\"}> </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        { rows }                        \r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n\r\n    }\r\n    onChangeText = (evt, id) =>\r\n    {\r\n        const value = evt.target.value; \r\n        this.props.onChange( id, value);\r\n        console.log( id, value );\r\n        let state = {...this.state};\r\n        state[id] = value;\r\n        this.setState(state);        \r\n    }\r\n    onDelete = i =>\r\n    {\r\n        let arr = [...this.state.arr];\r\n        arr.splice(i, 1);\r\n        console.log(arr, i )\r\n        this.setState({arr});\r\n    }\r\n    onAdd = () =>\r\n    {\r\n        let arr = [...this.state.arr];\r\n        arr.push({\r\n            link: \"\",\r\n            title: \"\"  \r\n        });\r\n        this.setState({arr});\r\n    }\r\n}\r\n\r\n\r\nexport default withWidth()\r\n(\r\n    withStyles(styles)(\r\n        RepositoriesDialog\r\n    )\r\n);\r\n","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\SertificatsDialog.js",["268","269","270","271"],"// SertificatsDialog.js\r\nimport { Component } from 'react';\r\nimport clsx from 'clsx';\r\nimport Dropzone from 'react-dropzone'\r\n\r\nimport withWidth from '@material-ui/core/withWidth';\r\nimport {withStyles} from '@material-ui/core/styles';\r\n\r\nimport Fab from '@material-ui/core/Fab'; \r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport blueGrey from '@material-ui/core/colors/blueGrey' \r\n\r\n// icons\r\n\r\nconst styles = theme => ({\r\n    tabPanel: {\r\n        width:      '100%',\r\n        height:     '100% ',\r\n        overflow:   'auto',\r\n        overflowX:   'hidden',\r\n        padding:    15,\r\n        position:   \"relative\" \r\n    },\r\n    tableContainer:{\r\n        zIndex:100\r\n    },\r\n    table: \r\n    {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        width: '100%'\r\n    },\r\n    buttonPanel :\r\n    {\r\n        paddingBottom: 40,\r\n        display:'flex'\r\n    },\r\n    descrPanel:\r\n    {\r\n        width:\"100%\",\r\n        backgroundColor:\"transparent\",\r\n        marginLeft:40,\r\n        border:\"none\",\r\n        display:'flex',\r\n        alignItems:\"center\"\r\n    },\r\n    littleRow : \r\n    {\r\n        width: 110\r\n    },\r\n    nameRow : \r\n    {\r\n        width: 220\r\n    },\r\n    input : \r\n    {\r\n        width: \"100%\"\r\n    } \r\n});\r\n\r\nclass SertificatsDialog extends Component \r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        const arr = Object.keys(props.native.certificates)\r\n            .map(e => { return  {data : props.native.certificates[e], title : e} } )\r\n        \r\n        this.state = {\r\n            ...props,\r\n            arr     : arr,\r\n            chclass : false\r\n        }\r\n\r\n    }\r\n    render()\r\n    {\r\n        //console.log( this.props );\r\n        const { classes } = this.props; \r\n        const rows = this.state.arr.map((e, i) =>\r\n        {\r\n            return <TableRow key={e.title + e.data}  className=\"float_row\">\r\n                <TableCell className={this.props.classes.littleRow  + \" float_cell\"}>\r\n                    {i + 1}\r\n                </TableCell>\r\n                <TableCell className={this.props.classes.nameRow  + \" float_cell\"}>                               \r\n                    <TextField \r\n                        defaultValue={e.title}\r\n                        InputLabelProps={{\r\n                            readOnly: false,\r\n                            shrink: true,\r\n                        }} \r\n                        className={this.props.classes.input + \" xs-centered\"}\r\n                    />\r\n                </TableCell>\r\n                <TableCell className= \"grow_cell float_cell\">\r\n                    <TextField\r\n                        id=\"default\" \r\n                        defaultValue={ e.data }\r\n                        InputLabelProps={{\r\n                            readOnly: false,\r\n                            shrink: true,\r\n                        }}\r\n                        className={this.props.classes.input + \" xs-centered\"}\r\n                        onChange={evt => this.onChangeText(evt, e.title) }\r\n                    />\r\n                </TableCell>\r\n                <TableCell className={this.props.classes.littleRow  + \" float_cell\"}>\r\n                    <Fab\r\n                        size=\"small\"  \r\n                        color=\"secondary\" \r\n                        aria-label=\"add\" \r\n                        onClick={evt => this.onDelete( i )}\r\n                    >\r\n                       <DeleteIcon />\r\n                    </Fab>\r\n                </TableCell>\r\n            </TableRow>\r\n        })\r\n        return <div className={ classes.tabPanel }>\r\n            <Dropzone \r\n                noClick \r\n                accept=\"text/plain,application/json\"\r\n            >\r\n            {({ getRootProps, getInputProps, acceptedFiles, fileRejections }) => (\r\n                <div {...getRootProps({ \r\n                    accept:  \"text/plain\",\r\n                    className   : clsx( this.state.chclass ? \"drop-container drop-dop\" : 'drop-container'),\r\n                    onDragEnter : evt => {\r\n                        //console.log( getRootProps(), evt );\r\n                        this.setState({chclass : true}) \r\n                    },\r\n                    onDragLeave : evt => {\r\n                        //console.log( \"onDragLeave\", evt, acceptedFiles, fileRejections ) \r\n                        this.setState({chclass : false}) \r\n                    },\r\n                    onDrop      : evt => {\r\n                        //console.log( \"onDrop\", evt, acceptedFiles, fileRejections );\r\n                        if( fileRejections.length > 0 ) \r\n                        {\r\n                            //console.log( \"onDrop fileRejections\", fileRejections);\r\n                            let msg = [];\r\n                            fileRejections.map((e =>\r\n                                {\r\n                                    let m = e.file.name + \": \", mm = [];\r\n                                    e.errors.forEach(ee =>\r\n                                        {\r\n                                           mm.push( ee.message );\r\n                                        })\r\n                                    msg.push( m + mm.join( \",\" ) );   \r\n                                }));\r\n                            alert(msg.join(\", \"))\r\n                        }\r\n                        if( acceptedFiles.length > 0 )\r\n                        {\r\n                            //console.log( \"onDrop acceptedFiles\", acceptedFiles);\r\n                            acceptedFiles.map(file =>\r\n                            {\r\n                                var reader = new FileReader();\r\n                                reader.onload = async (e) =>\r\n                                { \r\n                                    //console.log( file.name ); \r\n                                    //console.log( e.target.result ); \r\n                                    let arr = [...this.state.arr];\r\n                                    let name = file.name;\r\n                                    name =  name.split(\".\");   \r\n                                    name.splice( name.length - 1, 100 ) \r\n                                    arr.push({\r\n                                        data: e.target.result,\r\n                                        title:  name.join(\".\")\r\n                                    });\r\n                                    this.setState({arr});\r\n                                    let dat = {};\r\n                                    arr.forEach(ar =>\r\n                                    {\r\n                                        dat[ar.title] = ar.data;\r\n                                    })\r\n                                    this.props.onChange( \r\n                                        \"native\", \r\n                                        {\r\n                                            certificates : dat\r\n                                        }\r\n                                    );\r\n                                };\r\n                                reader.readAsText(file);\r\n                            })\r\n                            \r\n                        }\r\n                        else if(fileRejections.length == 0)\r\n                        {\r\n                            alert(\"No files exists\")\r\n                        }\r\n                        this.setState({chclass : false}) \r\n                    }\r\n                })}>\r\n                    <input {...getInputProps()} /> \r\n                </div>\r\n            )}\r\n            </Dropzone>\r\n            <div className={ classes.buttonPanel }>\r\n                <Fab \r\n                    size=\"small\"  \r\n                    className=\"small_size\"\r\n                    color=\"primary\" \r\n                    aria-label=\"add\"\r\n                    onClick={this.onAdd}\r\n                >\r\n                    <AddIcon/>\r\n                </Fab>\r\n                <Paper variant=\"outlined\" className={ classes.descrPanel }>\r\n                    {\r\n                        this.props.t(\r\n                            \"вы можете использовать абсолютный путь к сертификату, например '/opt/certs/cert.pem', или просто перетащить файл сюда\"\r\n                        )\r\n                    }\r\n                </Paper>\r\n            </div>\r\n            <TableContainer className={classes.tableContainer}>\r\n                <Table className={classes.table} aria-label=\"customized table\">\r\n                    <TableHead>\r\n                        <TableRow className=\"float_row\">\r\n                            <TableCell className={this.props.classes.littleRow  + \" float_cell\"}> </TableCell>\r\n                            <TableCell className={this.props.classes.nameRow  + \" float_cell\"}>\r\n                                {this.props.t(\"name\")}\r\n                            </TableCell>\r\n                            <TableCell className= \"grow_cell float_cell\">\r\n                                {this.props.t(\"Sertificate\")}\r\n                            </TableCell>\r\n                            <TableCell className={this.props.classes.littleRow  + \" float_cell\"}> </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        { rows }                        \r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    }\r\n    onChangeText = (evt, id) =>\r\n    {\r\n        const value = evt.target.value; \r\n        this.props.onChange( id, value);\r\n        console.log( id, value );\r\n        let state = {...this.state};\r\n        state[id] = value;\r\n        this.setState(state);        \r\n    }\r\n    onDelete = i =>\r\n    {\r\n        let arr = [...this.state.arr];\r\n        arr.splice(i, 1);\r\n        console.log(arr, i )\r\n        this.setState({arr});\r\n    }\r\n    onAdd = () =>\r\n    {\r\n        let arr = [...this.state.arr];\r\n        arr.push({\r\n            link: \"\",\r\n            title: \"\"  \r\n        });\r\n        this.setState({arr});\r\n    }\r\n}\r\n\r\n\r\nexport default withWidth()\r\n(\r\n    withStyles(styles)(\r\n        SertificatsDialog\r\n    )\r\n);\r\n\r\n\r\n\r\n","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\SSLDialog.js",["272","273"],"//SSLDialog.js\r\nimport { Component } from 'react';\r\n\r\nimport withWidth from '@material-ui/core/withWidth';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Fab from '@material-ui/core/Fab';  \r\nimport InputLabel from '@material-ui/core/InputLabel'; \r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport blueGrey from '@material-ui/core/colors/blueGrey'\r\n\r\n\r\n// icons\r\n\r\nconst styles = theme => ({\r\n    tabPanel: {\r\n        width:      '100%',\r\n        height:     '100% ',\r\n        overflow:   'auto',\r\n        overflowX:   'hidden',\r\n        padding:    15,\r\n        //backgroundColor: blueGrey[ 50 ]\r\n    },\r\n    buttonPanel :\r\n    {\r\n        paddingBottom: 40,\r\n        display:'flex'\r\n    },\r\n    descrPanel:\r\n    {\r\n        width:\"100%\",\r\n        backgroundColor:\"transparent\",\r\n        marginLeft:40,\r\n        border:\"none\",\r\n        display:'flex',\r\n        alignItems:\"center\"\r\n    },\r\n    formControl: \r\n    {\r\n        margin: theme.spacing(1),\r\n        minWidth: \"100%\",\r\n    },\r\n});\r\n\r\nclass SSLDialog extends Component \r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={ \r\n            ...props\r\n        }\r\n\r\n    }\r\n    render()\r\n    {\r\n        console.log( this.props.native.letsEncrypt );\r\n        const { classes, native } = this.state; \r\n        const {letsEncrypt} = native || {};\r\n        return <div className={ classes.tabPanel }>\r\n            <div className={ classes.buttonPanel }>\r\n                <Fab \r\n                    size=\"small\"  \r\n                    color=\"primary\" \r\n                    aria-label=\"add\"\r\n                    onClick={this.onAdd}\r\n                    className=\"small_size\"\r\n                >\r\n                    <AddIcon />\r\n                </Fab>\r\n                <Paper \r\n                    variant=\"outlined\" \r\n                    className={ classes.descrPanel }\r\n                    dangerouslySetInnerHTML={{__html: this.props.t(\"letsnecrypt_help\")}}\r\n                />\r\n            </div>\r\n            <Grid container spacing={6}> \r\n                <Grid item md={3} xs={12}> \r\n                    <FormControl className={classes.formControl}> \r\n                        <TextField\r\n                            id=\"email\"\r\n                            label={ this.props.t(\"Email for account:\")}\r\n                            value={ letsEncrypt.email }\r\n                            InputLabelProps={{\r\n                                readOnly: false,\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={evt => this.onChangeText(evt, \"email\") }\r\n                        />\r\n                    </FormControl>\r\n                </Grid> \r\n                <Grid item md={3} xs={12}> \r\n                    <FormControl className={classes.formControl}> \r\n                        <TextField\r\n                            id=\"domains\"\r\n                            label={ this.props.t(\"Domains:\")}\r\n                            value={ letsEncrypt.domains }\r\n                            InputLabelProps={{\r\n                                readOnly: false,\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={evt => this.onChangeText(evt, \"domains\") }\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item md={3} xs={12}> \r\n                    <FormControl className={classes.formControl}> \r\n                        <TextField\r\n                            id=\"path\" \r\n                            label={ this.props.t(\"Path to storage:\")}\r\n                            value={ letsEncrypt.path }\r\n                            InputLabelProps={{\r\n                                readOnly: false,\r\n                                shrink: true,\r\n                            }}\r\n                            onChange={evt => this.onChangeText(evt, \"path\") }\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    }\r\n    onChangeText = (evt, id) =>\r\n    {\r\n        const value = evt.target.value; \r\n        this.props.onChange( id, value);\r\n        console.log( id, value );\r\n        let state = {...this.state};\r\n        state[id] = value;\r\n        this.setState(state);        \r\n    }\r\n}\r\n\r\n\r\nexport default withWidth()\r\n(\r\n    withStyles(styles)(\r\n        SSLDialog\r\n    )\r\n);\r\n\r\n\r\n\r\n","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\ACLDialog.js",["274","275","276","277"],"//ACLDialog.js\r\n\r\nimport { Component } from 'react';\r\n\r\nimport withWidth from '@material-ui/core/withWidth';\r\nimport {withStyles} from '@material-ui/core/styles'; \r\nimport { Grid,  Typography, TextField, FormControl, Checkbox  } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\n\r\nimport blueGrey from '@material-ui/core/colors/blueGrey'\r\n\r\n\r\n// icons\r\n\r\nconst styles = theme => ({\r\n    tabPanel: {\r\n        width:      '100%',\r\n        height:     '100% ',\r\n        overflow:   'auto',\r\n        overflowX:   'hidden',\r\n        padding:    15,\r\n        //backgroundColor: blueGrey[ 50 ]\r\n    },\r\n    buttonPanel :\r\n    {\r\n        paddingBottom: 40,\r\n        display:'flex'\r\n    },\r\n    descrPanel:\r\n    {\r\n        width:\"100%\",\r\n        backgroundColor:\"transparent\",\r\n        marginLeft:40,\r\n        border:\"none\",\r\n        display:'flex',\r\n        alignItems:\"center\"\r\n    },\r\n    formControl: \r\n    {\r\n        margin: theme.spacing(1),\r\n        minWidth: \"100%\",\r\n    },\r\n    tableCell:\r\n    {\r\n        textAlign:\"center\",\r\n        border: \"1px solid #AAA\",\r\n\t\tpaddingLeft:0,\r\n\t\tpaddingRight:0\r\n    }\r\n});\r\n\r\nclass ACLDialog extends Component \r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={ \r\n            ...props\r\n        }\r\n\r\n    }\r\n    render()\r\n    {\r\n        const {classes} = this.props;\r\n        const users = this.props.users.map((elem, index)=>\r\n        {\r\n             return <MenuItem value={elem.ts} key={index}>\r\n                 { this.props.t(elem.common.name) }\r\n             </MenuItem>   \r\n        } );\r\n        const groups = this.props.groups.map((elem, index)=>\r\n        {\r\n             return <MenuItem value={elem._id} key={index}>\r\n                { this.props.t(elem.common.name['ru']) }\r\n             </MenuItem>   \r\n        } );\r\n        return <div className={ classes.tabPanel }>\r\n            <Typography variant=\"h5\" component=\"div\">\r\n                {this.props.t(\"Access control list\")}\r\n            </Typography>\r\n            <Grid container spacing={3}>\r\n                <Grid item lg={3} md={6} xs={12}>\r\n                    <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink id={\"owner\" + \"-label\"}>\r\n                            { this.props.t(\"Owner user\")}\r\n                        </InputLabel>\r\n                        <Select\r\n                            className={classes.formControl}\r\n                            id={\"owner\"}\r\n                            value={ this.state.owner }\r\n                            onChange={ evt => this.handleChange(evt, \"owner\") }\r\n                            displayEmpty \r\n                            inputProps={{ 'aria-label': 'users' }}\r\n                        > \r\n                            {users}\r\n                        </Select> \r\n                    </FormControl> \r\n                </Grid>\r\n                <Grid item lg={3} md={6} xs={12}>\r\n                    <FormControl className={classes.formControl}>\r\n                        <InputLabel shrink id={\"ownergroup\" + \"-label\"}>\r\n                            { this.props.t(\"Owner group\")}\r\n                        </InputLabel>\r\n                        <Select\r\n                            className={classes.formControl}\r\n                            id={\"ownergroup\"}\r\n                            value={ this.state.ownergroup }\r\n                            onChange={ evt => this.handleChange(evt, \"ownergroup\")  }\r\n                            displayEmpty \r\n                            inputProps={{ 'aria-label': 'ownergroup' }}\r\n                        > \r\n                            {groups}\r\n                        </Select> \r\n                    </FormControl> \r\n                </Grid>\r\n            </Grid> \r\n            <Grid container spacing={3}>\r\n                <Grid item lg={4} xs={12} md={6}>\r\n                    <Typography variant=\"h6\" component=\"div\">\r\n                        {this.props.t(\"Object rights\")}\r\n                    </Typography>\r\n                    { this.getTable( 0 ) }\r\n                </Grid>\r\n                <Grid item lg={4} xs={12} md={6}>\r\n                    <Typography variant=\"h6\" component=\"div\">\r\n                        {this.props.t(\"States rights\")}\r\n                    </Typography>\r\n                    { this.getTable( 1 ) }\r\n                </Grid>\r\n                <Grid item lg={4} xs={12} md={6}>\r\n                    <Typography variant=\"h6\" component=\"div\">\r\n                        {this.props.t(\"File rights\")}\r\n                    </Typography>\r\n                    { this.getTable( 2 ) }\r\n                </Grid>\r\n            </Grid> \r\n        </div>\r\n\r\n    }\r\n    getTable( n )\r\n    {\r\n        const {classes} = this.props;\r\n        return <TableContainer>\r\n            <Table className={classes.table} aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell colSpan={2} className={classes.tableCell}>\r\n                            {this.props.t(\"Owner\")}\r\n                        </TableCell>\r\n                        <TableCell colSpan={2} className={classes.tableCell}>\r\n                            {this.props.t(\"Group\")}\r\n                        </TableCell>\r\n                        <TableCell colSpan={2} className={classes.tableCell}>\r\n                            {this.props.t(\"Everyone\")}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    <TableRow>\r\n                        <TableCell className={classes.tableCell}>\r\n                            {this.props.t(\"read\")}\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            {this.props.t(\"write\")}\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            {this.props.t(\"read\")}\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            {this.props.t(\"write\")}\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            {this.props.t(\"read\")}\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            {this.props.t(\"write\")}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell className={classes.tableCell}>\r\n                            <Checkbox\r\n                                defaultChecked\r\n                                color=\"primary\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            <Checkbox\r\n                                defaultChecked\r\n                                color=\"primary\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            <Checkbox\r\n                                defaultChecked\r\n                                color=\"primary\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            <Checkbox\r\n                                defaultChecked\r\n                                color=\"primary\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            <Checkbox\r\n                                defaultChecked\r\n                                color=\"primary\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                        </TableCell>\r\n                        <TableCell className={classes.tableCell}>\r\n                            <Checkbox\r\n                                defaultChecked\r\n                                color=\"primary\"\r\n                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                            />\r\n                        </TableCell>\r\n                    </TableRow>\r\n                                         \r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    }\r\n    handleChange = (evt, id) =>\r\n    {\r\n        const value = evt.target.value; \r\n        console.log( evt, id, value );\r\n        this.props.onChange( id, value);\r\n        let state = {...this.state};\r\n        state[id] = value;\r\n        this.setState(state);        \r\n    }\r\n}\r\n\r\n\r\nexport default withWidth()\r\n(\r\n    withStyles(styles)(\r\n        ACLDialog\r\n    )\r\n);\r\n\r\n","D:\\#work\\ioBroker.admin\\src-rx\\src\\dialogs\\StatisticsDialog.js",["278","279"],{"ruleId":"280","replacedBy":"281"},{"ruleId":"282","replacedBy":"283"},{"ruleId":"284","severity":1,"message":"285","line":6,"column":8,"nodeType":"286","messageId":"287","endLine":6,"endColumn":19},{"ruleId":"284","severity":1,"message":"288","line":33,"column":8,"nodeType":"286","messageId":"287","endLine":33,"endColumn":17},{"ruleId":"289","severity":1,"message":"290","line":248,"column":20,"nodeType":"291","messageId":"292","endLine":250,"endColumn":14,"fix":"293"},{"ruleId":"289","severity":1,"message":"294","line":248,"column":20,"nodeType":"291","messageId":"292","endLine":248,"endColumn":33,"fix":"295"},{"ruleId":"296","severity":1,"message":"297","line":249,"column":24,"nodeType":"298","messageId":"299","endLine":249,"endColumn":26},{"ruleId":"296","severity":1,"message":"297","line":249,"column":75,"nodeType":"298","messageId":"299","endLine":249,"endColumn":77},{"ruleId":"289","severity":1,"message":"294","line":250,"column":18,"nodeType":"291","messageId":"292","endLine":250,"endColumn":31,"fix":"300"},{"ruleId":"301","severity":1,"message":"302","line":254,"column":12,"nodeType":"303","endLine":262,"endColumn":14},{"ruleId":"289","severity":1,"message":"294","line":279,"column":22,"nodeType":"291","messageId":"292","endLine":279,"endColumn":35,"fix":"304"},{"ruleId":"284","severity":1,"message":"305","line":3,"column":49,"nodeType":"286","messageId":"287","endLine":3,"endColumn":55},{"ruleId":"284","severity":1,"message":"306","line":3,"column":57,"nodeType":"286","messageId":"287","endLine":3,"endColumn":62},{"ruleId":"284","severity":1,"message":"307","line":17,"column":8,"nodeType":"286","messageId":"287","endLine":17,"endColumn":16},{"ruleId":"289","severity":1,"message":"308","line":433,"column":25,"nodeType":"291","messageId":"292","endLine":433,"endColumn":37,"fix":"309"},{"ruleId":"284","severity":1,"message":"307","line":20,"column":8,"nodeType":"286","messageId":"287","endLine":20,"endColumn":16},{"ruleId":"284","severity":1,"message":"307","line":22,"column":8,"nodeType":"286","messageId":"287","endLine":22,"endColumn":16},{"ruleId":"310","severity":1,"message":"311","line":154,"column":51,"nodeType":"312","messageId":"313","endLine":154,"endColumn":53},{"ruleId":"310","severity":1,"message":"311","line":168,"column":52,"nodeType":"312","messageId":"313","endLine":168,"endColumn":54},{"ruleId":"296","severity":1,"message":"297","line":200,"column":55,"nodeType":"298","messageId":"299","endLine":200,"endColumn":57},{"ruleId":"284","severity":1,"message":"314","line":8,"column":8,"nodeType":"286","messageId":"287","endLine":8,"endColumn":18},{"ruleId":"284","severity":1,"message":"307","line":15,"column":8,"nodeType":"286","messageId":"287","endLine":15,"endColumn":16},{"ruleId":"284","severity":1,"message":"315","line":7,"column":29,"nodeType":"286","messageId":"287","endLine":7,"endColumn":38},{"ruleId":"284","severity":1,"message":"307","line":18,"column":8,"nodeType":"286","messageId":"287","endLine":18,"endColumn":16},{"ruleId":"316","severity":1,"message":"317","line":92,"column":56,"nodeType":"298","messageId":"318","endLine":92,"endColumn":57},{"ruleId":"316","severity":1,"message":"317","line":109,"column":61,"nodeType":"298","messageId":"318","endLine":109,"endColumn":62},{"ruleId":"284","severity":1,"message":"319","line":62,"column":16,"nodeType":"286","messageId":"287","endLine":62,"endColumn":22},{"ruleId":"284","severity":1,"message":"319","line":137,"column":16,"nodeType":"286","messageId":"287","endLine":137,"endColumn":22},"no-native-reassign",["320"],"no-negated-in-lhs",["321"],"no-unused-vars","'DialogTitle' is defined but never used.","Identifier","unusedVar","'lightBlue' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property 0.","MemberExpression","unexpectedWhitespace",{"range":"322","text":"323"},"Unexpected whitespace before property getTabs.",{"range":"324","text":"325"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",{"range":"326","text":"325"},"react/jsx-pascal-case","Imported JSX component _Component must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement",{"range":"327","text":"325"},"'Marker' is defined but never used.","'Popup' is defined but never used.","'blueGrey' is defined but never used.","Unexpected whitespace before property marker.",{"range":"328","text":"325"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'InputLabel' is defined but never used.","'TextField' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'common' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[10551,10552],"",[10396,10398],".",[10563,10565],[11795,11797],[14332,14334]]